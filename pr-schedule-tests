#!/bin/sh -ex
CMS_BOT_DIR=$(dirname $0)
case $CMS_BOT_DIR in /*) ;; *) CMS_BOT_DIR=$(pwd)/${CMS_BOT_DIR} ;; esac
ARCHITECTURE_FILTER=${ARCHITECTURE_FILTER-.*}
CONFIG_MAP_FILE="$CMS_BOT_DIR/config.map"

cd $WORKSPACE

# The pull request number is $1
PULL_REQUEST=$1
CMSDIST_PR=$2
if [ "X$PUB_USER" = "X" ] ; then PUB_USER="cms-sw"; fi
PROP_FILE=${PULL_REQUEST}
PUB_REPO="${PUB_USER}/cmssw"
if [ "X$PULL_REQUEST" != "X" ] ; then
  # Use helper to get PR branch
  RELEASE_QUEUE=`$CMS_BOT_DIR/get-pr-branch $PULL_REQUEST ${PUB_REPO}`

  COMP_QUEUE=$(echo $RELEASE_QUEUE | sed 's|^\(CMSSW_[0-9]*_[0-9]*\)_.*|\1_X|')
  COMP_ARCH=$(grep "RELEASE_QUEUE=$COMP_QUEUE;" $CONFIG_MAP_FILE | grep -v "DISABLED=" | grep "PROD_ARCH=1;" | tr ';' '\n' | grep "SCRAM_ARCH=" | sed 's|SCRAM_ARCH=||')

  MLINES=`grep "=$RELEASE_QUEUE;" $CONFIG_MAP_FILE | grep -v DISABLED= | grep "SCRAM_ARCH=$ARCHITECTURE_FILTER;"`
  MLC=$(echo $MLINES | tr ';' '\n' | grep SCRAM_ARCH= | wc -l)
  if [ $MLC -gt 1 ] ; then
    MLINES=$(grep "=$RELEASE_QUEUE;" $CONFIG_MAP_FILE | grep -v DISABLED= |  grep "SCRAM_ARCH=$COMP_ARCH;" | grep "PROD_ARCH=1")
  fi
else
  PUB_REPO="${PUB_USER}/cmsdist"
  PROP_FILE=${CMSDIST_PR}
  GH_JSON=$(curl -s https://api.github.com/repos/${PUB_REPO}/pulls/$CMSDIST_PR)
  CMSDIST_BRANCH=$(echo $GH_JSON | python -c 'import json,sys;obj=json.load(sys.stdin);print obj["base"]["ref"]')
  if [ $(cat $CMS_BOT_DIR/config.map | grep -v 'NO_IB=' | grep -v 'DISABLED=1;' | grep "CMSDIST_TAG=${CMSDIST_BRANCH};" | wc -l) -gt 1 ] ; then
    MLINES=$(cat $CMS_BOT_DIR/config.map | grep -v 'NO_IB='| grep -v 'DISABLED=1;' | grep "CMSDIST_TAG=${CMSDIST_BRANCH};" | grep "PR_TESTS=1")
    if [ $(echo $MLINES | tr ';' '\n' | grep SCRAM_ARCH= | wc -l) -gt 1 ] ; then
      MLINES=$(cat $CMS_BOT_DIR/config.map | grep -v 'NO_IB='| grep -v 'DISABLED=1;' | grep "CMSDIST_TAG=${CMSDIST_BRANCH};" | grep "PR_TESTS=1" | grep 'RELEASE_QUEUE=CMSSW_[0-9][0-9]*_[0-9][0-9]*_X')
    fi
  else
    MLINES=$(cat $CMS_BOT_DIR/config.map | grep -v 'NO_IB='| grep -v 'DISABLED=1;' | grep "CMSDIST_TAG=${CMSDIST_BRANCH};")
  fi
fi
MLC=$(echo $MLINES | tr ';' '\n' | grep SCRAM_ARCH= | wc -l)
if [ $MLC -eq 1 ] ; then
    eval $MLINES
    OUTPUT_FILE=properties-pr-${PROP_FILE}-${SCRAM_ARCH}.txt
    echo PULL_REQUEST=${PULL_REQUEST} > $OUTPUT_FILE
    echo ARCHITECTURE=${SCRAM_ARCH} >> $OUTPUT_FILE
    if [ "X$RELEASE_FORMAT" = X ] ; then
      if [ "X$NO_IB" = "X1" ] ; then
        RELEASE_QUEUE=$(grep label=$(echo ${RELEASE_QUEUE} | sed 's|_X||') $CMS_BOT_DIR/releases.map | grep "architecture=${SCRAM_ARCH}" | tail -1 | sed 's|.*label=||;s|;.*||')
      fi
      echo RELEASE_FORMAT=${RELEASE_QUEUE} >> $OUTPUT_FILE
    else
      echo RELEASE_FORMAT=${RELEASE_FORMAT} >> $OUTPUT_FILE
    fi
    echo DO_TESTS=${DO_TESTS} >> $OUTPUT_FILE
    echo DO_SHORT_MATRIX=${DO_SHORT_MATRIX} >> $OUTPUT_FILE
    echo DO_STATIC_CHECKS=${DO_STATIC_CHECKS} >> $OUTPUT_FILE
    echo DO_DUPLICATE_CHECKS=${DO_DUPLICATE_CHECKS} >> $OUTPUT_FILE
    echo MATRIX_EXTRAS=${MATRIX_EXTRAS} >> $OUTPUT_FILE
    echo ADDITIONAL_PULL_REQUESTS=${ADDITIONAL_PULL_REQUESTS} >> $OUTPUT_FILE
    echo WORKFLOWS_FOR_VALGRIND_TEST=${WORKFLOWS_FOR_VALGRIND_TEST} >> $OUTPUT_FILE
    echo AUTO_POST_MESSAGE=${AUTO_POST_MESSAGE} >> $OUTPUT_FILE
    echo RUN_CONFIG_VIEWER=${RUN_CONFIG_VIEWER} >> $OUTPUT_FILE
    echo USE_DAS_CACHE=${USE_DAS_CACHE} >> $OUTPUT_FILE
    echo BRANCH_NAME=${BRANCH_NAME} >> $OUTPUT_FILE
    echo APPLY_FIREWORKS_RULE=${APPLY_FIREWORKS_RULE} >> $OUTPUT_FILE
    echo RUN_IGPROF=${RUN_IGPROF} >> $OUTPUT_FILE
    echo CMSDIST_PR=${CMSDIST_PR} >> $OUTPUT_FILE
    echo FULL_TOOLCONF=true >> $OUTPUT_FILE
    echo COMPARISON_ARCH=${COMP_ARCH} >> $OUTPUT_FILE
    echo PUB_USER=${PUB_USER} >> $OUTPUT_FILE
    echo DOCKER_IMG=${DOCKER_IMG} >> $OUTPUT_FILE
    echo IGNORE_BOT_TESTS=${IGNORE_BOT_TESTSG} >> $OUTPUT_FILE
else
  $CMS_BOT_DIR/report-pull-request-results RELEASE_NOT_FOUND --repo ${PUB_REPO} --pr $PULL_REQUEST --pr-job-id ${BUILD_NUMBER}
fi

