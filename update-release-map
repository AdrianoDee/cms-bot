#!/bin/sh -ex
CMSSW_X_Y_Z=$1
ARCHITECTURE=$2

FULL_RELEASE=`echo $CMSSW_X_Y_Z | grep '_[a-zA-Z]*patch[1-9][0-9]*.*' | sed 's|_[a-zA-Z]*patch.*||'`
if [ "X$FULL_RELEASE" != "X" ] ; then
  SCRAM_ARCH=`grep "label=$FULL_RELEASE;" releases.map | grep 'prodarch=1;' | sed 's|.*architecture=||;s|;.*||'`
fi
if [ "X$FULL_RELEASE" = "X" -o "X$SCRAM_ARCH" = "X" ] ; then
  RELEASE_SERIES=`echo $CMSSW_X_Y_Z | sed 's/^\(CMSSW_[0-9][0-9]*_[0-9][0-9]*_\).*/\1X/'`
  eval `cat config.map | grep "RELEASE_QUEUE=$RELEASE_SERIES" | grep 'PROD_ARCH=1'`
fi

prodarch=0
if [ "$SCRAM_ARCH" = "$ARCHITECTURE" ]; then prodarch=1 ; fi

RELEASE_TYPE=Development
if [ X`echo $CMSSW_X_Y_Z | grep -e '_pre[0-9][0-9]*'` = X ] ; then RELEASE_TYPE=Production ; fi

if [ X`grep -e "architecture=$ARCHITECTURE;" releases.map | grep -e "label=$CMSSW_X_Y_Z;"` = X ]; then
  if [ `grep -e "label=$CMSSW_X_Y_Z;" releases.map | sed -e's/.*type=//;s/;.*//' | grep -v -e "$RELEASE_TYPE" | sort -u | wc -l` -ge 1 ]; then
    echo "Too many release types." && exit 1
  fi
  if [ "X$prodarch" = "X1" ] ; then
    if [ `grep -e "label=$CMSSW_X_Y_Z;" releases.map | grep -e ";prodarch=1;" | wc -l` -ge 1 ]; then
      echo "Too many production architectures for release." && exit 1
    fi
  fi
  echo "architecture=$ARCHITECTURE;label=$CMSSW_X_Y_Z;type=$RELEASE_TYPE;state=Announced;prodarch=$prodarch;" >> releases.map
  git commit -m "Add $CMSSW_X_Y_Z for $ARCHITECTURE as $RELEASE_TYPE." releases.map
  git pull --rebase
  git push
else
  echo "Release already announced."
fi
echo 'ALL_OK'

