#!/usr/bin/env python
from github import Github
from os.path import expanduser
from optparse import OptionParser
import yaml

import re
from sys import exit

RELEASE_BRANCH_MILESTONE=yaml.load("cmsdist-milestones.yaml")

# Prepare various comments regardless of whether they will be made or not.
def format(s, **kwds):
  return s % kwds

# Update the milestone for a given issue.
# - If the issue already has a milestone, do not bother.
# - Get the name of the release queue and construct a milestone name
# - Get the list of all milestones and check if the milestone name is already there.
#   - If not create a milestone
#   - If yes assign the issue to the milestone.
def updateMilestone(repo, issue, pr):
  if issue.milestone:
    return
  branch = pr.base.label.split(":")[1]
  IS_CMSDIST_RE="IB/(CMSSW[^/]*)/[^/]+$"
  m = re.match(IS_CMSDIST_RE, branch)
  if not m:
    return
  milestoneName = "Next " + m.group(1)

  milestones = repo.get_milestones(state="open")

  for milestone in milestones:
    if milestone.title == milestoneName:
      print "Assign to milestone " + str(milestone.number)
      issue.edit(milestone=milestone)
      return

  print "Create milestone " + milestoneName
  milestone = repo.create_milestone(title=milestoneName)
  issue.edit(milestone=milestone)

IS_CMSDIST_RE="IB/(CMSSW[^/]*)/[^/]+$"

if __name__ == "__main__":
  parser = OptionParser(usage="%prog <pull-request-id>")
  parser.add_option("-n", "--dry-run", dest="dryRun", action="store_true", help="Do not modify Github", default=False)
  opts, args = parser.parse_args()

  if len(args) != 1:
    parser.error("Too many arguments")
  prId = int(args[0])
  gh = Github(login_or_token=open(expanduser("~/.github-token")).read().strip())
  try:
    pr = gh.get_organization("cms-sw").get_repo("cmsdist").get_pull(prId)
  except:
    print "Could not find pull request. Maybe this is an issue"
    exit(0)

  repo = gh.get_organization("cms-sw").get_repo("cmsdist")
  issue = repo.get_issue(prId)

  updateMilestone(repo, issue, pr)
