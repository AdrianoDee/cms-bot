#!/usr/bin/env python

# Given a branch, gets all of its pull requests
# and recreates them in a different branch.

from github import Github, GithubException
from sys import exit
from os.path import expanduser
from argparse import ArgumentParser
from datetime import datetime
import re

if __name__ == "__main__":
  parser = ArgumentParser()
  parser.add_argument("-s", "--source")
  parser.add_argument("-d", "--dest")
  parser.add_argument("--since", dest="since", default=None)
  parser.add_argument("-n", "-dry-run", dest="dryRun", default=False, action="store_true")
  parser.add_argument("issues", nargs="*", type=int)
  args = parser.parse_args()

  print args

  gh = Github(login_or_token=open(expanduser("~/.github-token")).read().strip())

  try:
    gh_repo = gh.get_organization("cms-sw").get_repo("cmssw")
  except:
    print "Could not find repository."
    exit(1)
  milestones = gh_repo.get_milestones(state="open")
  milestone = [x for x in milestones if args.source in x.title]
  destMilestone = [x for x in milestones if args.dest in x.title]

  if not milestone:
    print "Could not find source milestone."
    exit(1)

  if not destMilestone:
    print "Could not find destination milestone."
    exit(1)
  since = datetime (2000,1,1)
  if args.since:
    since = datetime.strptime(args.since, '%Y-%m-%dT%H:%M')
  done_issues = gh_repo.get_issues(milestone=destMilestone[0])
  issues = args.issues or gh_repo.get_issues(milestone=milestone.pop(), state="open")
  done_issues_id = {}
  issueRe = re.compile('Automatically ported from '+args.source+' #(\d+)\s+.*',re.MULTILINE)
  for issue in done_issues:
    body = issue.body.encode("ascii", "ignore")
    m  = issueRe.search(body)
    if m:
      done_issues_id[int(m.group(1))]=issue.number
      print m.group(1),"=>",issue.number
  for issue in issues:
    # If we just have the numeric Id, let's get the associated issue.
    if type(issue) == int:
      issue = gh_repo.get_issue(issue)
    print "Checking ",issue.number
    if issue.number in done_issues_id:
      print "Already ported as #",done_issues_id[issue.number]
      continue
    if issue.created_at < since:
      print "Older than ",args.since
      continue
    pr = gh_repo.get_pull(issue.number)
    print issue.number, pr.head.user.login, pr.head.ref, destMilestone, issue.created_at
    newBody = issue.body + "\nAutomatically ported from " + args.source + " #%s (original by @%s)." % (issue.number, str(pr.head.user.login))
    try:
      newHead = "%s:%s" % (pr.head.user.login, pr.head.ref)
      
      print 
      print '-----'
      print "Forward porting %s" % issue.number
      print issue.title.encode('utf-8')
      print newBody.encode('utf-8')
      print args.dest
      print "%s:%s" % (pr.head.user.login, pr.head.ref)
      print '---'
      if args.dryRun:
        print 'ATTENTION: Not creating new PR on Github (dry-run)'
        continue
      newIssue = gh_repo.create_pull(title = issue.title, body =newBody, base = args.dest, head = newHead )
      print "New issue number", newIssue.number

    except GithubException, e:
      print "Error while processing: ", issue.number
      print e
      continue
