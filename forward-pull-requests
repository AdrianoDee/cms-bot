#!/usr/bin/env python

# Given a branch, gets all of its pull requests
# and recreates them in a different branch.

from github import Github, GithubException
from sys import exit
from os.path import expanduser
from argparse import ArgumentParser
from datetime import datetime
import re
from time import sleep
from cms_static import GH_CMSSW_ORGANIZATION as gh_user
from cms_static import GH_CMSSW_REPO as gh_cmssw
from github_utils import get_ported_PRs

if __name__ == "__main__":
  parser = ArgumentParser()
  parser.add_argument("-s", "--source")
  parser.add_argument("-d", "--dest")
  parser.add_argument("-r", "--repository", dest="repository", help="Github Repositoy name e.g. cms-sw/cmssw.", type=str, default=gh_user+"/"+gh_cmssw)
  parser.add_argument("--since", dest="since", default=None)
  parser.add_argument("-n", "-dry-run", dest="dryRun", default=False, action="store_true")
  parser.add_argument("pulls", nargs="*", type=int)
  args = parser.parse_args()

  print args
  if args.source == args.dest:
    print "Source and destination branches are same"
    exit(1)
  elif (not args.source) or (not args.dest):
    print "Missing source or destination branch"
    exit(1)

  since = datetime (2000,1,1)
  if args.since:
    since = datetime.strptime(args.since, '%Y-%m-%dT%H:%M')

  gh = Github(login_or_token=open(expanduser("~/.github-token")).read().strip())

  try:
    gh_repo = gh.get_repo(args.repository)
  except:
    print "Could not find repository."
    exit(1)
  
  gh_repo.get_branch(args.source)
  gh_repo.get_branch(args.dest)

  pulls = args.pulls or gh_repo.get_pulls(base=args.source, state="open")

  done_prs_id = get_ported_PRs(gh_repo, sargs.source, args.dest)
  for pr in pulls:
    # If we just have the numeric Id, let's get the associated issue.
    if type(pr) == int:
      pr = gh_repo.get_pull(pr)
    print "Checking ",pr.number
    if pr.number in done_prs_id:
      print "Already ported as #",done_prs_id[pr.number]
      continue
    if pr.created_at < since:
      print "Older than ",args.since
      continue
    print pr.number, pr.head.user.login, pr.head.ref, pr.created_at
    newBody = pr.body + "\nAutomatically ported from " + args.source + " #%s (original by @%s)." % (pr.number, str(pr.head.user.login))
    try:
      newHead = "%s:%s" % (pr.head.user.login, pr.head.ref)
      print newHead
      print '-----'
      print "Porting %s" % pr.number
      print pr.title.encode('utf-8')
      print newBody.encode('utf-8')
      print args.dest
      print "%s:%s" % (pr.head.user.login, pr.head.ref)
      print '---'
      if args.dryRun:
        print 'ATTENTION: Not creating new PR on Github (dry-run)'
        continue
      newPR = gh_repo.create_pull(title = pr.title, body =newBody, base = args.dest, head = newHead )
      print "New PR number", newPR.number
      sleep(15)
    except GithubException, e:
      print "Error while processing: ", pr.number
      print e
      continue
