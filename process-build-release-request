#!/usr/bin/env python
from optparse import OptionParser
from github import Github
from os.path import expanduser
from categories import REQUEST_BUILD_RELEASE,CMSSW_L1,APPROVE_BUILD_RELEASE
from commands import getstatusoutput
import re
import json
import urllib2
import yaml


# 
# Processes a github issue to check if it is requesting the build of a new release
# If the issue is not requesting any release, it ignores it. 
#

# -------------------------------------------------------------------------------
# Global Variables
# --------------------------------------------------------------------------------
GH_CMSSW_ORGANIZATION = 'cms-sw'
GH_CMSSW_REPO = 'cmssw'
GH_CMSDIST_REPO = 'cmsdist'
BUILD_REL = '^[Bb]uild[ ]+(CMSSW_[^ ]+)'
NOT_AUTHORIZED_MSG = 'You are not authorized to trigger the build of a release.'
CONFIG_MAP_FILE = 'config.map'
NO_ARCHS_FOUND_MSG = 'No architecures to build found for {rel_name}. Please check that you entered a ' \
                     'valid release name or that the IBs are currently enabled for {queue}'
RELEASE_BASE_URL = 'https://github.com/cms-sw/cmssw/releases/tag/%s'
RELEASE_CREATED_MSG = 'Release created: %s'
RELEASE_CREATION_FAIL_MSG = 'There was an error while attempting to create {rel_name}. ' \
                            'Please check if it already exists https://github.com/cms-sw/cmssw/releases' 
WRONG_RELEASE_NAME_MSG = 'The release name is malformed. Please check for typos.'
ACK_MSG = 'Request received. I will start to build the release after one of the following approve ' \
          'the issue: {approvers_list}. You can do this by writing "+1" in a ' \
          'comment.\n'
WATCHERS_MSG = '{watchers_list} you requested to watch the automated builds for {queue}' 
QUEUING_BUILDS_MSG = 'Queuing Jenkins build for the following architectures: %s \n' \
                     'You can abort the build by writing "Abort" in a comment. I will delete the release, ' \
                     'the cmssw and cmsdist tag, and close the issue. You can\'t abort the upload once at' \
                     ' least one achitecture is being uploaded'
QUEING_UPLOADS_MSG = 'Queing Jenkins upload for {architecture}'
CLEANUP_STARTED_MSG = 'The cleanup has started for {architecture}'
BUILD_QUEUED_LABEL = 'build-release-queued'
BUILD_STARTED_LABEL = 'build-release-started'
JENKINS_CMSSW_X_Y_Z = 'CMSSW_X_Y_Z'
JENKINS_ARCH = 'ARCHITECTURE'
JENKINS_ISSUE_NUMBER = 'ISSUE_NUMBER'
JENKINS_MACHINE_NAME = 'MACHINE_NAME'
JENKINS_CMSSW_QUEUE = 'CMSSW_QUEUE'
WRONG_NOTES_RELEASE_MSG = '{previous_release} does not appear to be a valid release name'
GENERATING_RELEASE_NOTES_MSG = 'Generating release notes since {previous_release}. \n' \
                               'You can see the progress here: \n' \
                               'https://cmssdt.cern.ch/jenkins/job/release-produce-changelog/'
REL_NAME_REGEXP="(CMSSW_[0-9]+_[0-9]+)_[0-9]+(_SLHC[0-9]*|)(_pre[0-9]+|_[a-zA-Z]*patch[0-9]+|)(_[^_]*|)"

UPLOAD_COMMENT = 'upload %s'
UPLOAD_ALL_COMMENT = 'upload all'
DEFAULT_CHECK_COMMENT = ( REQUEST_BUILD_RELEASE + [ 'cmsbuild' ] )
RELEASE_NOTES_GENERATED_LBL = 'release-notes-requested'
JENKINS_PREV_RELEASE='PREVIOUS_RELEASE'
JENKINS_RELEASE='RELEASE'
JENKINS_PREV_CMSDIST_TAG='PREVIOUS_CMSDIST_TAG'
JENKINS_CMSDIST_TAG='CMSDIST_TAG'

# -------------------------------------------------------------------------------
# Statuses
# --------------------------------------------------------------------------------
# This is to determine the status of the issue after reading the comments

#The issue has just been created
NEW_ISSUE = 'NEW_ISSUSE'
# The issue has been received, but it needs approval to start the build
PENDING_APPROVAL = 'build-pending-approval'
# The build has been queued in jenkins
BUILD_IN_PROGRESS = 'build-in-progress'
# The build has started
BUILD_STARTED = 'build-started'
# The build has been aborted. 
BUILD_ABORTED = 'build-aborted'

# -------------------------------------------------------------------------------
# Functions
# --------------------------------------------------------------------------------

#
# creates a properties file to cleanup the build files. 
#
def create_properties_file_cleanup( release_name, arch, issue_number, machine_name):
  out_file_name = 'cleanup-%s-%s.properties' % ( release_name , arch )
  if opts.dryRun:
    print 'Not creating cleanup properties file (dry-run):\n %s' % out_file_name
  else:
    print 'Creating properties file for %s' % arch
    out_file = open( out_file_name , 'w' )
    out_file.write( '%s=%s\n' % ( JENKINS_CMSSW_X_Y_Z , release_name ) )
    out_file.write( '%s=%s\n' % ( JENKINS_ARCH , arch ) )
    out_file.write( '%s=%s\n' % ( JENKINS_ISSUE_NUMBER , issue_number ) )
    out_file.write( '%s=%s\n' % ( JENKINS_MACHINE_NAME , machine_name ) )


# Creates a properties file in Jenkins to trigger the upload
# it needs to know the machine that was used for the build
#
def create_properties_files_upload( release_name, arch, issue_number, machine_name ):

  out_file_name = 'upload-%s-%s.properties' % ( release_name , arch )
  if opts.dryRun:
    print 'Not creating properties file (dry-run):\n %s' % out_file_name
  else:
    print 'Creating properties file for %s' % arch
    out_file = open( out_file_name , 'w' )
    out_file.write( '%s=%s\n' % ( JENKINS_CMSSW_X_Y_Z , release_name ) )
    out_file.write( '%s=%s\n' % ( JENKINS_ARCH , arch ) )
    out_file.write( '%s=%s\n' % ( JENKINS_ISSUE_NUMBER , issue_number ) )
    out_file.write( '%s=%s\n' % ( JENKINS_MACHINE_NAME , machine_name ) )


#
# Searches in the comments if there is a comment made from  the given users  that
# matches the given pattern. It returns a list with the matched comments.
#
def search_in_comments( comments, user_logins, pattern, first_line ):
  found_comments = []
  requested_comment_bodies = [ c.body for c in comments if c.user.login in user_logins ]
  for body in requested_comment_bodies:
    examined_str = body
    if first_line:
      examined_str = str(body.encode("ascii", "ignore").split("\n")[0].strip("\n\t\r "))
   
    if examined_str == pattern:
      found_comments.append( body )
      continue

    if re.match( pattern , examined_str ):
      found_comments.append( body )

  return found_comments


#
# Checks if the issue has already been seen so the issue will not be processed again
# Returns True if the issue needs to be processed, False if not
# 
def check_if_already_processed( issue ):
  comments = [ c for c in issue.get_comments( ) ]
  comment_bodies = [ c.body for c in comments if c.user.login == 'cmsbuild' ]
  for body in comment_bodies:
    if 'Release created' in body:
      return True
    if 'Queuing Jenkins build' in body:
      return True
    if 'You are not authorized' in body:
      return True

  return False
#
#  Creates the properties files to trigger the build in Jenkins
#
def create_properties_files(release_name, architectures, issue_number, queue):
  if opts.dryRun:
    print 'Not creating properties files for (dry-run): %s' % ", ".join( architectures )
    return

  for arch in architectures:
    out_file_name = 'build-%s-%s.properties' % ( release_name , arch )
    print 'Creating properties file for %s' % arch
    out_file = open( out_file_name , 'w' )
    out_file.write( '%s=%s\n' % ( JENKINS_CMSSW_X_Y_Z , release_name ) )
    out_file.write( '%s=%s\n' % ( JENKINS_ARCH , arch ) )
    out_file.write( '%s=%s\n' % ( JENKINS_ISSUE_NUMBER , issue_number ) )
    out_file.write( '%s=%s\n' % ( JENKINS_CMSSW_QUEUE , queue) )

#
# generates the properties file for triggering the release notes
# it infers the tag names based on te format REL/<release-name>/architecture
#
def create_properties_file_rel_notes( release_name, previous_release, architecture):
  cmsdist_tag = 'REL/'+release_name+'/'+architecture
  previos_cmsdist_tag = 'REL/'+previous_release+'/'+architecture
  out_file_name = 'release-notes.properties'

  if opts.dryRun:
    print 'Not creating properties file (dry-run): %s' % out_file_name
    return

  out_file = open( out_file_name , 'w' )
  out_file.write( '%s=%s\n' % ( JENKINS_PREV_RELEASE, previous_release ) )
  out_file.write( '%s=%s\n' % ( JENKINS_RELEASE, release_name ) )
  out_file.write( '%s=%s\n' % ( JENKINS_PREV_CMSDIST_TAG, previos_cmsdist_tag ) )
  out_file.write( '%s=%s\n' % ( JENKINS_CMSDIST_TAG, cmsdist_tag) )

#
# Creates a release in github
# If dry-run is selected it doesn't create the release and just prints that
# returns true if it was able to create the release, false if not
#
def create_release_github( repository, release_name, branch):
  if opts.dryRun:
    print 'Not creating release (dry-run):\n %s' % release_name
    return True

  print 'Creating release:\n %s' % release_name
  # creating releases will be available in the next version of pyGithub
  params = { "tag_name" : release_name, 
           "target_commitish" : branch,
           "name" : release_name,
           "body" : 'cms-bot is going to build this release',
           "draft" : False, 
           "prerelease" : False }

  request = urllib2.Request("https://api.github.com/repos/" + GH_CMSSW_ORGANIZATION + "/" + GH_CMSSW_REPO +"/releases",
  headers={"Authorization" : "token " + GH_TOKEN })
  request.get_method = lambda: 'POST'
  print '--'
  try:
    print urllib2.urlopen( request, json.dumps( params  ) ).read()
    return True
  except Exception as e:
    print 'There was an error while creating the release:\n', e
    return False
  print

#
# Deletes in github the release given as a parameter. 
# If the release does no exists, it informs it in the message.
# 
def delete_release_github( release_name ):
  if opts.dryRun:
    print 'Not deleting release (dry-run):\n %s' % release_name
    return 'Not deleting release (dry-run)'
  
  releases_url = "https://api.github.com/repos/" + GH_CMSSW_ORGANIZATION + "/" + GH_CMSSW_REPO +"/releases?per_page=100"

  request = urllib2.Request( releases_url, headers={"Authorization" : "token " + GH_TOKEN })
  releases = json.loads(urllib2.urlopen(request).read())
  matchingRelease = [x["id"] for x in releases if x["name"] == release_name]

  if len(matchingRelease) < 1:
    return "Release %s not found." % release_name

  releaseId = matchingRelease[0]
  url = "https://api.github.com/repos/cms-sw/cmssw/releases/%s" % releaseId
  request = urllib2.Request( url, headers={"Authorization" : "token " + GH_TOKEN })
  request.get_method = lambda: 'DELETE'

  try:
    print urllib2.urlopen( request ).read()
    return 'Release successfully deleted'
  except Exception as e:
    return 'There was an error while deleting the release:\n %s' % e

#
# Deletes in github the tag given as a parameter
#
def delete_cmssw_tag_github( release_name ):
  if opts.dryRun:
    print 'Not deleting cmssw tag (dry-run):\n %s' % release_name
    return 'Not deleting cmssw tag (dry-run): %s ' % release_name

  cmd = "git push git@github.com:{org}/{repo}.git :{tag}"\
        .format( org=GH_CMSSW_ORGANIZATION,
                 repo=GH_CMSSW_REPO,
                 tag= release_name )
  print 'Executing: \n %s' % cmd
  status, out = getstatusoutput( cmd )
  print out
  if status != 0:
    msg = 'I was not able to delete the tag %s. Probaly it had not been created.' % release_name
    print msg
    return msg 
 
  msg = 'cmssw tag %s successfully deleted.' % release_name 
  return msg
#
# for each architecture, gets the tag in cmsdist that should have ben created and deletes it
#
def delete_cmsdist_tags_github( release_name, architectures ):
  result = ''
  for arch in architectures:
    tag_to_delete = "REL/{rel_name}/{architecture}".format( rel_name=release_name, architecture=arch )

    if opts.dryRun:
      msg = 'Not deleting cmsdist tag (dry-run): %s' % tag_to_delete
      result += '\n\n  -' + msg
      continue

    cmd = "git push git@github.com:{org}/{repo}.git :{tag}"\
        .format( org=GH_CMSSW_ORGANIZATION,
                 repo=GH_CMSDIST_REPO,
                 tag=tag_to_delete )

    print 'Executing: \n %s' % cmd
    status, out = getstatusoutput( cmd )
    print out
    if status != 0:
      msg = 'I was not able to delete the cmsdist tag %s. Probably it had not been created.' % tag_to_delete
    else:
      msg = 'cmsdist tag %s successfully deleted.' % tag_to_delete

    result += '\n\n  -' + msg

  return result
#
# Reads config.map and returns a list of the architectures for which a release needs to be built.
# If the list is empty it means that it didn't find any architecture for that release queue, or 
# that the IBs are disabled.
#
def get_config_map_properties():
  specs = []
  f = open( CONFIG_MAP_FILE , 'r' )
  lines = [l.strip(" \n\t;") for l in f.read().split("\n") if l.strip(" \n\t;")]
  for line in lines:
    entry = dict(x.split("=",1) for x in line.split(";") if x)
    specs.append(entry)
  return specs

#
# Adds a label to the issue in github
# if dry-run is selected it doesn't add the label and just prints it
def add_label( issue , label ):
  if opts.dryRun:
    print 'Not adding label (dry-run):\n %s' % label
    return
  print 'Adding label:\n %s' % label
  issue.add_to_labels( label )

#
# posts a message to the issue in github
# if dry-run is selected it doesn't post the message and just prints it
#
def post_message( issue , msg ):
  if opts.dryRun:
    print 'Not posting message (dry-run):\n %s' % msg
    return
  if search_in_comments( comments, [ 'cmsbuild', 'nclopezo' ], msg, False):
    print 'Message already in the thread: \n %s' % msg
    return
  print 'Posting message:\n %s' % msg 
  issue.create_comment( msg )

#
# reads the comments and gets returns the status of the issue
#
def get_issue_status( issue ):
  labels = [ l.name for l in issue.get_labels() ]

  if not labels:
    return NEW_ISSUE
  if BUILD_ABORTED in labels:
    return BUILD_ABORTED 
  if PENDING_APPROVAL in labels:
    return PENDING_APPROVAL
  if BUILD_IN_PROGRESS in labels:
    return BUILD_IN_PROGRESS

#
# removes the labels of the issue
#
def remove_labels( issue ):
  if opts.dryRun:
    print 'Not removing issue labels (dry-run)'
    return
  issue.delete_labels()

# Removes a label form the issue
def remove_label( issue, label ):
  if opts.dryRun:
    print 'Not removing label (dry-run):\n %s' % label
    return
  print 'Removing label: %s' % label
  issue.remove_from_labels( label )

#
# Aborts the build:
# -Deletes the release in github
# -Deletes the cmssw tags
# -Deletes the cmsdist tags
#
def abort_build( issue, release_name, architectures):
  msg = 'Deleting %s:' % release_name

  del_rel_result = delete_release_github( release_name )
  msg += '\n\n  -' + del_rel_result
  msg += '\n\n  -' + delete_cmssw_tag_github( release_name )
  msg += delete_cmsdist_tags_github( release_name, architectures )
  msg += '\n\n' + 'You must create a new issue to start over the build.'
  post_message( issue, msg )
  add_label( issue, BUILD_ABORTED )
  remove_label( issue, BUILD_IN_PROGRESS )

# -------------------------------------------------------------------------------
# Start of execution 
# --------------------------------------------------------------------------------

if __name__ == "__main__":
  parser = OptionParser( usage="%prog <issue-id>" )
  parser.add_option( "-n" , "--dry-run" , dest="dryRun" , action="store_true", help="Do not post on Github", default=False )
  parser.add_option( "-f" , "--force" , dest="force" , action="store_true", help="Ignore previous comments in the issue and proccess it again", default=False )
  parser.add_option( "-c", "--check-upload", dest="check_upload" , action="store" , help="Check if one of the authorized users has written the upload message"
                                                                                        "for the architecture given as a parameter. It exits with 0 if it finds"
                                                                                        "a message with the structure 'upload <architecture>', if not it exits"
                                                                                        " with 1"  )
  opts, args = parser.parse_args( )

  if len( args ) != 1:
    parser.print_help()
    parser.error( "Too many arguments" )

  GH_TOKEN = open( expanduser("~/.github-token")).read().strip()
  
  issue_id  = int( args[ 0 ] )
  gh = Github( login_or_token=GH_TOKEN )
  issue = gh.get_organization( GH_CMSSW_ORGANIZATION ).get_repo( GH_CMSSW_REPO ).get_issue( issue_id )
  comments = [ c for c in issue.get_comments( ) ]
 
  # 1. Is this a pull request?
  if issue.pull_request:
    print 'This is a pull request, ignoring.'
    exit( 0 )
  
  title_match = re.match(BUILD_REL, issue.title)

  # 2. Is this issue meant to build a release?
  if not title_match:
    print 'This issue is not for building a release, ignoring.'
    exit( 0 )
  
  # 3. Is the author authorized to trigger a build?
  if not issue.user.login in REQUEST_BUILD_RELEASE:
    print 'User not authorized'
    post_message( issue , NOT_AUTHORIZED_MSG )
    exit( 0 )

  release_name = title_match.group(1)
  # Get the release queue from the release name.
  print release_name

  rel_name_match = re.match( REL_NAME_REGEXP, release_name )

  if not rel_name_match:
    print 'Release name not correctly formed'
    post_message( issue, WRONG_RELEASE_NAME_MSG )
    exit( 0 )

  release_queue = "".join([x for x in rel_name_match.group(1,4)] + ["_X"] + [x.strip("0123456789") for x in rel_name_match.group(2)])

  print release_queue
  specs = get_config_map_properties()
  architectures = [x["SCRAM_ARCH"] for x in specs
                   if x["RELEASE_QUEUE"] == release_queue and not "DISABLED" in x]

    # Check if we have at least one architecture to build and complain if not.
  if not architectures:
    print 'no archs found for the requested release'
    msg = NO_ARCHS_FOUND_MSG.format( rel_name=release_name, queue=release_queue )
    post_message( issue, msg )
    exit( 0 )

  # Determine the release branch (which is the same as the release queue if not
  # specified) and start the build if needed.
  release_branches = [x["RELEASE_BRANCH"] for x in specs
                      if x["RELEASE_QUEUE"] == release_queue and "RELEASE_BRANCH" in x and not "DISABLED" in x]

  release_branch = release_queue
  if len(release_branches):
    release_branch = release_branches[0]


  # Get the status of this issue.
  status = get_issue_status( issue ) 
  print 'Status: %s \n' % status 

  if status == NEW_ISSUE:
    approvers = ", ".join( [ "@"+x for x in APPROVE_BUILD_RELEASE ] )
    ALL_WATCHERS = (yaml.load(file("build-release-watchers.yaml")))
    watchers = ALL_WATCHERS.get( release_queue )
    msg = ACK_MSG.format( approvers_list=approvers )

    if watchers:
      watchers_l = ", ".join( [ "@"+x for x in watchers ] )
      watchers_msg = WATCHERS_MSG.format( watchers_list=watchers_l, queue=release_queue )
      msg += watchers_msg  

    post_message( issue, msg)
    add_label( issue, PENDING_APPROVAL )
    exit( 0 )

  if status == PENDING_APPROVAL:
    approval_comments = search_in_comments( comments, APPROVE_BUILD_RELEASE , '^[+]1$', True )
    if not approval_comments:
      print 'Build not approved yet'
      exit( 0 )

    # if someone approved, go ahead and create the release
    cmssw_repo = gh.get_organization( GH_CMSSW_ORGANIZATION ).get_repo( GH_CMSSW_REPO )
    release_created = create_release_github( cmssw_repo, release_name, release_branch )
    if not release_created:
      msg = RELEASE_CREATION_FAIL_MSG.format( rel_name=release_name )
      post_message( issue , RELEASE_CREATION_FAIL_MSG.format( rel_name=release_name ) )
      exit( 0 )

    msg = RELEASE_CREATED_MSG % ( RELEASE_BASE_URL % release_name )
    post_message( issue , msg )

    create_properties_files( release_name, architectures, issue_id, release_queue )
    msg = QUEUING_BUILDS_MSG % ', '.join( architectures )
    post_message( issue , msg )
    remove_labels( issue )
    add_label( issue, BUILD_IN_PROGRESS )

  if status == BUILD_IN_PROGRESS:
    labels = [ l.name for l in issue.get_labels() ]
    to_upload = [ x.split('-')[0] for x in labels if '-build-ok' in x ]
    upload_ok = [ x.split('-')[0] for x in labels if '-upload-ok' in x ]
    uploading = [ x.split('-')[0] for x in labels if '-uploading' in x ] 
    build_error = [ x.split('-')[0] for x in labels if '-build-error' in x ]
    # the build can be aborted only if none of the architectures has been uploaded or is uploading
    if not ( uploading + upload_ok ):
      pattern = '^[Aa]bort$'
      abort_comments = search_in_comments( comments , APPROVE_BUILD_RELEASE , pattern, True )
      print abort_comments
      if abort_comments:
        print 'Aborting'
        abort_build( issue, release_name, architectures )
        exit( 0 )
    else:
      print "You can't abort the build at this point"
 
    if upload_ok and ( RELEASE_NOTES_GENERATED_LBL not in labels ):
      pattern = '^release-notes[ ]+since[ ]+[^ ]+[ ]+[^ ]+'
      release_notes_comments = search_in_comments( comments, APPROVE_BUILD_RELEASE, pattern, True )
      for comment in release_notes_comments:
        comment_parts = comment.strip().split(' ')
        prev_rel_name = comment_parts[ 2 ]
        requested_arch = comment_parts[ 3 ]
        rel_name_match = re.match( REL_NAME_REGEXP, prev_rel_name )
        if not rel_name_match:
          msg = WRONG_NOTES_RELEASE_MSG.format( previous_release=prev_rel_name )
          post_message( issue, msg )
          continue

        create_properties_file_rel_notes( release_name, prev_rel_name, requested_arch )
        msg = GENERATING_RELEASE_NOTES_MSG.format( previous_release=prev_rel_name )
        post_message( issue, msg )
        add_label( issue, RELEASE_NOTES_GENERATED_LBL )

    # check if the cleanup has been requested.
    to_cleanup = upload_ok + build_error
    if to_cleanup:
      pattern = '^cleanup$'
      cleanup_requested_comments = search_in_comments( comments, APPROVE_BUILD_RELEASE, pattern, True )
      if cleanup_requested_comments:
        # trigger the cleanup for each architecture that was build correctly
        for arch in to_cleanup:
          print arch
          pattern = 'The build has started for %s .*' % arch
          build_info_comments = search_in_comments( comments, ['cmsbuild'], pattern, False)
          if not build_info_comments:
            print 'No information found about the build machine, something is wrong for %s' % arch
            exit(1)
          
          build_machine = build_info_comments[-1].split( ' ' )[7].strip( '.' )
          print 'Triggering cleanup for %s' % arch
          create_properties_file_cleanup( release_name, arch, issue.number, build_machine )
          msg = CLEANUP_STARTED_MSG.format( architecture=arch )
          post_message( issue, msg ) 
          remove_label( issue, arch + '-upload-ok' )
          remove_label( issue, arch + '-build-error' )
          add_label( issue, arch + '-finished' )


    if not to_upload:
      print 'Nothing to upload for any architecture.' 
      exit( 0 )

    pattern = '^' + UPLOAD_ALL_COMMENT + '$'
    upload_all_requested = search_in_comments( comments , APPROVE_BUILD_RELEASE , pattern, True )
    
    for arch in to_upload:
      print 'Ready to upload %s' % arch

      if upload_all_requested:
        print 'Requested to upload all, uploading this arch'
      else:
        pattern = ( '^' + ( UPLOAD_COMMENT % arch ) )
        upload_requested = search_in_comments( comments , APPROVE_BUILD_RELEASE , pattern, True )
        if not upload_requested:
          print 'Upload not requested yet.'
          continue

      pattern = '^The build has started for %s .*' % arch
      build_info_comments = search_in_comments( comments, ['cmsbuild','nclopezo'] , pattern, True )
      if not build_info_comments:
        print 'No information found about the build machine, something is wrong'
        exit( 1 )

      first_line_info_comment = str(build_info_comments[-1].encode("ascii", "ignore").split("\n")[0].strip("\n\t\r ")) 
      build_machine = first_line_info_comment.split( ' ' )[ 7 ].strip( '.' )
      print 'Triggering upload for %s' % arch
      create_properties_files_upload( release_name , arch , issue.number , build_machine )
      post_message( issue , QUEING_UPLOADS_MSG.format( architecture=arch ) )
      remove_label( issue, arch + '-build-ok' )
      add_label( issue, arch + '-uploading' )

  exit( 0 )



