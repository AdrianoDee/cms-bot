#!/bin/sh -ex
CMS_BOT_DIR=$(dirname $0)
case $CMS_BOT_DIR in /*) ;; *) CMS_BOT_DIR=$(pwd)/${CMS_BOT_DIR} ;; esac
if [ "X$COMPARISON_ARCH" = "X" ] ; then COMPARISON_ARCH=$ARCHITECTURE; fi
source $CMS_BOT_DIR/jenkins-artifacts

BASELINE_DIR=ib-baseline-tests/$RELEASE_FORMAT/$COMPARISON_ARCH/$REAL_ARCH/matrix-results
PR_BASELINE_JOBDIR=pull-request-integration/PR-$PULL_REQUEST_NUMBER/$PULL_REQUEST_JOB_ID
PR_BASELINE_DIR=${PR_BASELINE_JOBDIR}/runTheMatrix-results

WFS_WITH_ERRORS=''

MAPPING_FILE=wf_mapping.txt
get_jenkins_artifacts ${BASELINE_DIR}/$MAPPING_FILE $WORKSPACE/$MAPPING_FILE

ERRORS_FILE=wf_errors.txt
get_jenkins_artifacts ${BASELINE_DIR}/$ERRORS_FILE $WORKSPACE/$ERRORS_FILE

# This file is generated by this script
DAS_NON_CONSISTENT_WFS_FILE=wf_non_consistent_das.txt

for wf in ${WORKFLOWS_LIST//,/ }
do
  WF_PATH=`grep -F $wf $WORKSPACE/$MAPPING_FILE` || true

  if [ "X$WF_PATH" = X ]; then
    ERR_DETAILS=`grep $wf $WORKSPACE/$ERRORS_FILE` || true
    if [ "X$ERR_DETAILS" = X ]; then
      WFS_WITH_ERRORS=$ERR_DETAILS,$wf';1'
    else
      WFS_WITH_ERRORS=$ERR_DETAILS,$WFS_WITH_ERRORS
    fi
  else
    echo "Going to compare: $wf"
    echo $WF_PATH
    echo ""
    WORKFLOWS_TO_COMPARE=$WORKFLOWS_TO_COMPARE,$WF_PATH
  fi

done

#remove first ,
WORKFLOWS_TO_COMPARE=`echo $WORKFLOWS_TO_COMPARE | sed 's/^.//'`

DETAILS_FILE=$WORKSPACE/'comparisonDetails.txt'
echo 'BASE_IB;'$RELEASE_FORMAT >> $DETAILS_FILE
echo 'PR_NUMBER;'$PULL_REQUEST_NUMBER >> $DETAILS_FILE
echo 'ADDITIONAL_PRS;'$ADDITIONAL_PULL_REQUESTS >> $DETAILS_FILE
echo 'ARCHITECTURE;'$ARCHITECTURE >> $DETAILS_FILE
echo 'REAL_ARCH;'$REAL_ARCH >> $DETAILS_FILE
echo 'COMPARISON_ARCH;'$COMPARISON_ARCH >> $DETAILS_FILE
echo 'MACHINE ARCHITECTURE:' >> $DETAILS_FILE
cat /proc/cpuinfo |  grep "model name" >> $DETAILS_FILE

ls /cvmfs/cms-ib.cern.ch || true
export SCRAM_ARCH=$ARCHITECTURE
scram project $RELEASE_FORMAT
cd $RELEASE_FORMAT
eval `scram run -sh`
git cms-addpkg Utilities/RelMon
cd ..

mkdir $WORKSPACE/results
cd $WORKSPACE/results

# --------------------------------------------------------------------------
# Download the Files
# --------------------------------------------------------------------------
mkdir $WORKSPACE/results/files
cd $WORKSPACE/results/files

echo $WORKFLOWS_TO_COMPARE

for WF in ${WORKFLOWS_TO_COMPARE//,/ }; do

  echo '#######################################'
  echo "downloading: $WF"

  WF_DIR=`echo $WF | cut -d "/" -f1`
  WF_NUMBER=`echo $WF | cut -d'_' -f1`
  WF_FILE=$(basename $WF)

  mkdir $WORKSPACE/results/files/$WF_DIR
  cd $WORKSPACE/results/files/$WF_DIR

    get_jenkins_artifacts ${BASELINE_DIR}/$WF $WORKSPACE/results/files/$WF_DIR/$RELEASE_FORMAT-$WF_FILE
    get_jenkins_artifacts ${BASELINE_DIR}/$WF_DIR/step1_dasquery.log $WORKSPACE/results/files/$WF_DIR/$RELEASE_FORMAT-step1_dasquery.log || true
    get_jenkins_artifacts ${PR_BASELINE_DIR}/$WF $WORKSPACE/results/files/$WF_DIR/$PULL_REQUEST_NUMBER-$WF_FILE || true
    get_jenkins_artifacts ${PR_BASELINE_DIR}/$WF_DIR/step1_dasquery.log $WORKSPACE/results/files/$WF_DIR/$PULL_REQUEST_NUMBER-'step1_dasquery.log' || true

    # check that the step1_dasquery.log files are correct.
    NUM_FILES=$(( `ls $WORKSPACE/results/files/$WF_DIR/*-step1_dasquery.log | wc -l` ))
    # if there is only one of them something is wrong, but if there is none is ok
    if [ "$NUM_FILES" -eq "1" ]; then
      WFS_WITH_DAS_INCONSISTENCY=$WF_NUMBER,$WFS_WITH_DAS_INCONSISTENCY
    elif [ "$NUM_FILES" -eq "2" ]; then

      PR_DAS_QUERY_LOG=$WORKSPACE/results/files/$WF_DIR/$PULL_REQUEST_NUMBER-'step1_dasquery.log'
      BASELINE_DAS_QUERY_LOG=$WORKSPACE/results/files/$WF_DIR/$RELEASE_FORMAT-'step1_dasquery.log'
      THEY_DIFFER=`diff -q $PR_DAS_QUERY_LOG $BASELINE_DAS_QUERY_LOG || true`
      if [ "X$THEY_DIFFER" != X ]; then
        WFS_WITH_DAS_INCONSISTENCY=$WF_NUMBER,$WFS_WITH_DAS_INCONSISTENCY
      fi

    fi 

  cd ..

done

echo $WFS_WITH_DAS_INCONSISTENCY >> $WORKSPACE/$DAS_NON_CONSISTENT_WFS_FILE


cd ..

echo 'Finished downloading files:'

get_jenkins_artifacts ${PR_BASELINE_JOBDIR}/testsResults.txt $WORKSPACE/results/testsResults.txt
sed -i "s/COMPARISON;QUEUED/COMPARISON;RUNNING/g" $WORKSPACE/results/testsResults.txt
send_jenkins_artifacts $WORKSPACE/results/testsResults.txt ${PR_BASELINE_JOBDIR}/testsResults.txt

pwd
ls -R

# --------------------------------------------------------------------------
# JR-Comparison
# --------------------------------------------------------------------------

#This is used manily for testing. In jenkins the 3 forms of comparisons are always run. But if you are testing you can control
#which comparison is run.
if [ "X$RUN_JR_COMP" = Xtrue ]; then

  JR_COMP_DIR=$WORKSPACE/results/JR-comparison

  mkdir -p $JR_COMP_DIR

  cp $CMS_BOT_DIR/comparisons/validateJR.sh $JR_COMP_DIR
  cp $CMS_BOT_DIR/comparisons/validate.C $JR_COMP_DIR
  cp $CMS_BOT_DIR/comparisons/matrix_70X.txt $JR_COMP_DIR

  mkdir -p $HOME/tools
  cp $CMS_BOT_DIR/comparisons/validate.C $HOME/tools

  #Download the baseline and pr files, they need to be downloaded again because the validateJR script needs more files to work, and they
  #can't be in the same structure as the files for the other comparisons. 
  mkdir -p $JR_COMP_DIR/$RELEASE_FORMAT
  mkdir -p $JR_COMP_DIR/PR-$PULL_REQUEST_NUMBER

  for WF in ${WORKFLOWS_TO_COMPARE//,/ }; do

    WF_DIR=`echo $WF | cut -d "/" -f1`
    WF_NUMBER=`echo $WF | cut -d'_' -f1`
    get_jenkins_artifacts ${BASELINE_DIR}/${WF_DIR}/ $JR_COMP_DIR/$RELEASE_FORMAT || true
    get_jenkins_artifacts ${PR_BASELINE_DIR}/${WF_DIR}/ $JR_COMP_DIR/PR-$PULL_REQUEST_NUMBER || true

  done  

  cd $JR_COMP_DIR
    (source $JR_COMP_DIR/validateJR.sh $JR_COMP_DIR/PR-$PULL_REQUEST_NUMBER $JR_COMP_DIR/$RELEASE_FORMAT OldVSNew matrix_70X.txt 2>&1 | tee -a $JR_COMP_DIR/validateJR.log) || true
  cd ..

  echo  'source '$JR_COMP_DIR'/validateJR.sh '$JR_COMP_DIR'/PR-'$PULL_REQUEST_NUMBER' '$JR_COMP_DIR'/'$RELEASE_FORMAT' OldVSNew matrix_70X.txt 2>&1 | tee -a '$JR_COMP_DIR'/validateJR.log' > $JR_COMP_DIR/command

  echo 'Finished with JR comparison:'

  echo 'Doing log and root comparison:'

  cd $JR_COMP_DIR
  (python $CMS_BOT_DIR/logRootQA.py ${JR_COMP_DIR}/${RELEASE_FORMAT} ${JR_COMP_DIR}/PR-${PULL_REQUEST_NUMBER} 2>&1 | tee -a $JR_COMP_DIR/logRootQA.log) || true

fi

# --------------------------------------------------------------------------
# Default Comparison
# --------------------------------------------------------------------------
if [ "X$RUN_DEFAULT_COMP" = Xtrue ]; then

  RELMON_COMP_DIR=$WORKSPACE/results/default-comparison
  mkdir $RELMON_COMP_DIR

  if [ "X$RUN_JR_COMP" = Xtrue ]; then
    RELMON_COMP_PARAMS_FILE=$RELMON_COMP_DIR/RelMonComparisonParams.txt
    $CMS_BOT_DIR/comparisons/analyzeFWComparison.py $JR_COMP_DIR $RELMON_COMP_PARAMS_FILE -R 2>&1 | tee -a $RELMON_COMP_DIR/RelMonAssignedParameters.log
  fi

  for WF in ${WORKFLOWS_TO_COMPARE//,/ }; do 

    WF_FILE=$(basename $WF)
    WF_DIR=`echo $WF | cut -d "/" -f1`

    WF_NUMBER=`echo $WF | cut -d'_' -f1`

    #create the output dir
    OUTPUT_DIR=$WORKSPACE/results/default-comparison/$WF_DIR
    mkdir -p $OUTPUT_DIR

    # If there is a file assigning custom thresholds from the results of the FWlite (JR) comparison, use it
    if [ "X$RUN_JR_COMP" = Xtrue ]; then
      eval $( cat $RELMON_COMP_PARAMS_FILE | grep "FOR_WF=$WF_NUMBER;" )
      echo $TH
      TH_PARAM="-t $TH "
    fi

    #requires checking out Utilities/RelMon from the release. It has already been done at the begining of this script. 

    # create a mini script for running this comparisons in parallel
    echo '#!/bin/sh -ex' >> $WORKSPACE/results/default-comparison/command-$WF_NUMBER
    echo 'compare_using_files.py '$WORKSPACE'/results/files/'$WF_DIR'/'$RELEASE_FORMAT'-'$WF_FILE' '$WORKSPACE'/results/files/'$WF_DIR'/'$PULL_REQUEST_NUMBER'-'$WF_FILE' -o '$OUTPUT_DIR' --metas " '$RELEASE_FORMAT' @@@ '$RELEASE_FORMAT' + '$PULL_REQUEST_NUMBER' " --use_black_file -C -R -p --no_successes -s b2b '$TH_PARAM'--standalone 2>&1 | tee -a '$OUTPUT_DIR'RelMonComp-'$WF_NUMBER'.log' >> $WORKSPACE/results/default-comparison/command-$WF_NUMBER

    echo "pushd $OUTPUT_DIR" >> $WORKSPACE/results/default-comparison/command-$WF_NUMBER
    echo "cp RelMonSummary.html index.html" >> $WORKSPACE/results/default-comparison/command-$WF_NUMBER
    echo 'find . -name "*" | xargs sh -c "sed -i -s 's#../RelMonSummary.html#RelMonSummary.html#g' || true"' >> $WORKSPACE/results/default-comparison/command-$WF_NUMBER
    echo "popd" >> $WORKSPACE/results/default-comparison/command-$WF_NUMBER

    chmod 755 $WORKSPACE/results/default-comparison/command-$WF_NUMBER

    # execute the script
    $WORKSPACE/results/default-comparison/command-$WF_NUMBER &

  done

  jobs
  wait

  echo 'Finished with default comparison'

fi

# ----------------------------------------------------------------------------
# Alternative Comparison
# ----------------------------------------------------------------------------

if [ "X$RUN_ALT_COMP" = Xtrue ]; then

  ALT_COMP_DIR=$WORKSPACE/results/alternative-comparison
  mkdir -p $ALT_COMP_DIR
  DQM_COMP_PARAMS_FILE=$ALT_COMP_DIR/comparisonParams.txt

  $CMS_BOT_DIR/comparisons/analyzeFWComparison.py $JR_COMP_DIR $DQM_COMP_PARAMS_FILE 2>&1 | tee -a $ALT_COMP_DIR/assignedParameters.log

  for WF in ${WORKFLOWS_TO_COMPARE//,/ }; do 

    WF_FILE=$(basename $WF)
    WF_DIR=`echo $WF | cut -d "/" -f1`

    WF_NUMBER=`echo $WF | cut -d'_' -f1`

    BASE_FILE=$WORKSPACE/results/files/$WF_DIR/$RELEASE_FORMAT-$WF_FILE
    COMP_FILE=$WORKSPACE/results/files/$WF_DIR/$PULL_REQUEST_NUMBER-$WF_FILE
  
    mkdir -p $ALT_COMP_DIR/$WF_NUMBER

    cp $CMS_BOT_DIR/comparisons/compareValHists.C $ALT_COMP_DIR/$WF_NUMBER
    cp $CMS_BOT_DIR/comparisons/makeDiff.sh $ALT_COMP_DIR/$WF_NUMBER

    eval $( cat $DQM_COMP_PARAMS_FILE | grep "FOR_WF=$WF_NUMBER;" )

    echo $MOD

    # create a mini script for running this comparisons in parallel
    echo '#!/bin/sh -ex' >> $ALT_COMP_DIR/command-$WF_NUMBER
    echo "pushd $ALT_COMP_DIR/$WF_NUMBER" >> $ALT_COMP_DIR/command-$WF_NUMBER
    echo "source $ALT_COMP_DIR/$WF_NUMBER/makeDiff.sh $BASE_FILE $COMP_FILE $WF_NUMBER-result.ps 0 $MOD 2>&1 | tee -a $ALT_COMP_DIR/runDQMComp-$WF_NUMBER.log" >> $ALT_COMP_DIR/command-$WF_NUMBER
    echo "mv diff.ps $ALT_COMP_DIR/$WF_NUMBER-result.ps || true" >> $ALT_COMP_DIR/command-$WF_NUMBER
    echo "mv diff.pdf $ALT_COMP_DIR/$WF_NUMBER-result.pdf || true" >> $ALT_COMP_DIR/command-$WF_NUMBER
    echo "gzip -f $ALT_COMP_DIR/$WF_NUMBER-result.ps || true" >> $ALT_COMP_DIR/command-$WF_NUMBER
    echo "gzip -f $ALT_COMP_DIR/$WF_NUMBER-result.pdf || true" >> $ALT_COMP_DIR/command-$WF_NUMBER
    echo "popd" >> $ALT_COMP_DIR/command-$WF_NUMBER

    chmod 755 $ALT_COMP_DIR/command-$WF_NUMBER
    $ALT_COMP_DIR/command-$WF_NUMBER &

  done

  jobs
  wait

  echo 'Finished with alternative comparison:'

fi

cd $WORKSPACE
mkdir -p upload/alternative-comparisons

#default-comparison
for f in results/default-comparison/* ; do
  [ -e $f ] && mv $f upload/
done

#alternative-comparison
for f in results/alternative-comparison/command* results/alternative-comparison/*.ps results/alternative-comparison/*.gz results/alternative-comparison/*.log results/alternative-comparison/comparisonParams.txt ; do
  [ -e $f ] && mv $f upload/alternative-comparisons/
done

#JR-comparison
for f in $(ls -d results/JR-comparison/command* results/JR-comparison/logRootQA.log results/JR-comparison/*/*.log results/JR-comparison/*/*.png | sed 's|results/JR-comparison/||') ; do
  d=$(dirname upload/validateJR/$f)
  if [ -e results/JR-comparison/$f ] ; then
    [ -d $d ] || mkdir -p $d
    mv results/JR-comparison/$f $d/
  fi
done

#files
[ -e results/files ] && mv results/files upload/files
[ -e comparisonDetails.txt ] && mv comparisonDetails.txt upload/

send_jenkins_artifacts $WORKSPACE/upload/ baseLineComparisons/${RELEASE_FORMAT}+${PULL_REQUEST_NUMBER}/${BUILD_NUMBER}/
if [ -e $WORKSPACE/results/testsResults.txt ] ; then
  sed -i "s/COMPARISON;.*/COMPARISON;$BUILD_NUMBER/g" $WORKSPACE/results/testsResults.txt
  send_jenkins_artifacts $WORKSPACE/results/testsResults.txt ${PR_BASELINE_JOBDIR}/testsResults.txt
fi

