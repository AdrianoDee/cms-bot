#!/usr/bin/env python
from optparse import OptionParser
from os.path import exists,expanduser
from commands import getstatusoutput
from github import Github
import json
import urllib2
from sys import exit
import re

#---------------------------------------------------------
# pyGithub
#--------------------------------------------------------

#
# get an official repository from the cms-sw organization
#
def get_official_repo( github , repository_name ):
  user = github.get_user()
  orgs = user.get_orgs()
  for org in orgs:
    if (org.login == 'cms-sw'):
      repo = org.get_repo( repository_name )
      return repo

#
# it looks for the description of the pull requests listed in the release notes
# returns the release notes with the description of each pull request
#
def fill_notes_description(notes, repo, gitdir, ref_repo=""):
  new_notes = {}
  for log_line in notes.splitlines():
    pr_number = int(log_line.split(' REPO='+gitdir+'#',2)[1].split(' ')[0])
    new_notes[pr_number]=re.sub('DESC$',repo.get_pull(int(pr_number)).title.encode("ascii", "ignore"),log_line.replace(" REPO="+gitdir+"#"," "+ref_repo+"#"))
  return new_notes

#
#defines the categories for each pr in the release notes
#
def add_categories_notes(notes, token):
  for pr_number in notes:
    request = urllib2.Request("https://api.github.com/repos/cms-sw/cmssw/issues/%s/labels" % str(pr_number),
                                  headers={"Authorization" : "token " + token})
    labels = json.loads(urllib2.urlopen(request).read())
    categories = [ l['name'].split('-')[0] for l in labels if re.match("^[a-zA-Z0-9]+[-](approved|pending|hold|rejected)$", l['name'])
                                                              and not re.match('^(tests|orp)-' , l['name'] ) ]
    if len(categories) == 0:
      print "no categories for:"
      print pr_number
    note = notes[pr_number]
    for cat in categories:
      note += " `%s` " % cat
    notes[pr_number] = note
  return notes

def format(s, **kwds):
  print kwds
  return s % kwds

def get_merge_prs(prev_tag, this_tag, git_dir):
  error, out = getstatusoutput("GIT_DIR="+git_dir+" git fetch --all --tags")
  if error: parser.error("Error while updating the repository:\n" + out)
  error, notes = getstatusoutput(format("GIT_DIR=%(git_dir)s"
                                      " git log --graph --merges --pretty='%%s: DESC' %(previous)s..%(release)s | "
                                      " grep ' Merge pull request #[1-9]' | grep -v '^| \* | | | ' | sed 's|^\| .* Merge pull request #|- **-->** REPO=%(git_dir)s#|' | "
                                      " sed 's|^\*.* Merge pull request #|- REPO=%(git_dir)s#|;s|||' | "
                                      " sed 's|/[^:]*||;s|from |from @|'",
                                      git_dir=git_dir,
                                      previous=prev_tag,
                                      release=this_tag))
  if error:
    print "Error while getting release notes."
    print notes
    exit(1)
  return notes

#
# gets release notes for cmssw
#
def get_cmssw_notes( previous_release , this_release ):
  if not exists("cmssw.git"):
    error, out = getstatusoutput("git clone --bare --reference /afs/cern.ch/cms/git-cmssw-mirror/cmssw.git git@github.com:cms-sw/cmssw.git")
    if error: parser.error("Error while checking out the repository:\n" + out)
  notes = get_merge_prs (previous_release, this_release, "cmssw.git")
  return fill_notes_description (notes, CMSSW_REPO, "cmssw.git")

#
# gets the changes in cmsdist, production architecture is the production architecture of the release
#
def get_cmsdist_notes( prev_cmsdist_tag , curr_cmsdist_tag ):
  if not exists("cmsdist.git"):
    error, out = getstatusoutput("git clone --bare git@github.com:cms-sw/cmsdist.git")
    if error: parser.error("Error while checking out the cmsdist repository:\n" + out)
  notes = get_merge_prs (prev_cmsdist_tag, curr_cmsdist_tag, "cmsdist.git")
  return fill_notes_description (notes, CMSDIST_REPO, "cmsdist.git", "cms-sw/cmsdist")

#
# returns the comparison url to include in the notes
#
def get_comparison_url( previous_tag , current_tag , repo ):
  return COMPARISON_URL % ( repo , previous_tag , current_tag )

#--------------------------------------------------------------------------------
# Start of Execution
#--------------------------------------------------------------------------------

COMPARISON_URL = 'https://github.com/cms-sw/%s/compare/%s...%s'

if __name__ == "__main__":
  parser = OptionParser(usage="%(progname) <previous-release> <this-release> <previous-cmsdist-tag> <this-cmsdist-tag>")
  parser.add_option("-n", "--dry-run", help="Only print out release notes. Do not execute.", 
                    dest="dryRun", default=False, action="store_true")
  opts, args = parser.parse_args()

  if len(args) != 4:
    parser.error("Wrong number or arguments")
  prev_release = args[0]
  curr_release = args[1]
  prev_cmsdist_tag = args[2]
  curr_cmsdist_tag = args[3]


  #---------------------------------
  # pyGithub intialization
  #---------------------------------

  token = open(expanduser("~/.github-token")).read().strip() 
  github = Github( login_or_token = token )
  CMSSW_REPO = get_official_repo( github , 'cmssw' )
  CMSDIST_REPO = get_official_repo( github , 'cmsdist' )
 
  cmssw_notes = get_cmssw_notes( prev_release , curr_release)
  cmsdist_notes = get_cmsdist_notes( prev_cmsdist_tag , curr_cmsdist_tag )

  cmssw_notes = add_categories_notes(cmssw_notes,token)
  cmssw_notes_str = ""
  cmsdist_notes_str = ""
  for pr in sorted(cmssw_notes.keys(), reverse=True):
    cmssw_notes_str += cmssw_notes[pr]+'\n'
  for pr in sorted(cmsdist_notes.keys(), reverse=True):
    cmsdist_notes_str += cmsdist_notes[pr]+'\n'

  request = urllib2.Request("https://api.github.com/repos/cms-sw/cmssw/releases?per_page=100",
                            headers={"Authorization" : "token " + token})
  releases = json.loads(urllib2.urlopen(request).read())
  matchingRelease = [x["id"] for x in releases if x["name"] == curr_release]
  if len(matchingRelease) < 1:
    print "Release %s not found." % curr_release
    exit(1)
  releaseId = matchingRelease[0]
  url = "https://api.github.com/repos/cms-sw/cmssw/releases/%s" % releaseId
  request = urllib2.Request(url, headers={"Authorization" : "token " + token})
  request.get_method = lambda: 'PATCH'
  print "Modifying release notes for %s at %s" % (curr_release, url)
  if opts.dryRun:
    print cmssw_notes_str
    print "\n cmsdist: \n"
    print cmsdist_notes_str
    print "--dry-run specified, quitting without modifying release."
    print 'ALL_OK'
    exit(0)

  header = "#### Changes since %s:\n%s\n" %  \
           ( prev_release , get_comparison_url( prev_release, curr_release , 'cmssw' ) )

  cmsdist_header = "\n#### CMSDIST Changes between Tags %s and %s:\n%s\n" % \
                   ( prev_cmsdist_tag , curr_cmsdist_tag , get_comparison_url( prev_cmsdist_tag, curr_cmsdist_tag , 'cmsdist' ) )

  print urllib2.urlopen(request, json.dumps({"body": header + cmssw_notes_str + cmsdist_header + cmsdist_notes_str })).read()
  print 'ALL_OK'
