#!/usr/bin/env python
from optparse import OptionParser
from os.path import exists,expanduser
from commands import getstatusoutput
from github import Github
import json
import urllib2
from sys import exit
import re
from cms_static import CMSDIST_REPO_NAME,CMSSW_REPO_NAME
from github_utils import prs2relnotes, get_merge_prs, api_rate_limits
from socket import setdefaulttimeout
setdefaulttimeout(120)

def format(s, **kwds): return s % kwds
#---------------------------------------------------------
# pyGithub
#--------------------------------------------------------

#
#defines the categories for each pr in the release notes
#
def add_categories_notes(notes):
  for pr_number in notes:
    api_rate_limits(github)
    categories = [ l.name.split('-')[0] for l in CMSSW_REPO.get_issue(int(pr_number)).labels if re.match("^[a-zA-Z0-9]+[-](approved|pending|hold|rejected)$", l.name)
                                                              and not re.match('^(tests|orp)-' , l.name) ]
    if len(categories) == 0:
      print "no categories for:",  pr_number
    else:
      print "Labels for %s: %s" % (pr_number, categories)
    note = notes[pr_number]
    for cat in categories:
      note += " `%s` " % cat
    notes[pr_number] = note
  return notes

def get_cmssw_notes( previous_release , this_release ):
  if not exists("cmssw.git"):
    error, out = getstatusoutput("git clone --bare --reference /afs/cern.ch/cms/git-cmssw-mirror/cmssw.git git@github.com:cms-sw/cmssw.git")
    if error: parser.error("Error while checking out the repository:\n" + out)
  getstatusoutput("GIT_DIR=cmssw.git git fetch --all --tags")
  return prs2relnotes(get_merge_prs(previous_release, this_release, "cmssw.git", CMSSW_REPO, github))

#
# gets the changes in cmsdist, production architecture is the production architecture of the release
#
def get_cmsdist_notes( prev_cmsdist_tag , curr_cmsdist_tag ):
  if not exists("cmsdist.git"):
    error, out = getstatusoutput("git clone --bare git@github.com:cms-sw/cmsdist.git")
    if error: parser.error("Error while checking out the cmsdist repository:\n" + out)
  getstatusoutput("GIT_DIR=cmsdist.git git fetch --all --tags")
  return prs2relnotes(get_merge_prs(prev_cmsdist_tag, curr_cmsdist_tag, "cmsdist.git", CMSDIST_REPO, github), "cms-sw/cmsdist")

#
# returns the comparison url to include in the notes
#
def get_comparison_url( previous_tag , current_tag , repo ):
  return COMPARISON_URL % ( repo , previous_tag , current_tag )

#--------------------------------------------------------------------------------
# Start of Execution
#--------------------------------------------------------------------------------

COMPARISON_URL = 'https://github.com/cms-sw/%s/compare/%s...%s'

if __name__ == "__main__":
  parser = OptionParser(usage="%(progname) <previous-release> <this-release> <previous-cmsdist-tag> <this-cmsdist-tag>")
  parser.add_option("-n", "--dry-run", help="Only print out release notes. Do not execute.", 
                    dest="dryRun", default=False, action="store_true")
  opts, args = parser.parse_args()

  if len(args) != 4:
    parser.error("Wrong number or arguments")
  prev_release = args[0]
  curr_release = args[1]
  prev_cmsdist_tag = args[2]
  curr_cmsdist_tag = args[3]


  #---------------------------------
  # pyGithub intialization
  #---------------------------------

  token = open(expanduser("~/.github-token")).read().strip() 
  github = Github( login_or_token = token )
  CMSSW_REPO = github.get_repo(CMSSW_REPO_NAME)
  CMSDIST_REPO =  github.get_repo(CMSDIST_REPO_NAME)
 
  cmssw_notes = get_cmssw_notes( prev_release , curr_release)
  cmsdist_notes = get_cmsdist_notes( prev_cmsdist_tag , curr_cmsdist_tag )

  cmssw_notes = add_categories_notes(cmssw_notes)
  cmssw_notes_str = ""
  cmsdist_notes_str = ""
  for pr in sorted(cmssw_notes.keys(), reverse=True):
    cmssw_notes_str += cmssw_notes[pr]+'\n'
  for pr in sorted(cmsdist_notes.keys(), reverse=True):
    cmsdist_notes_str += cmsdist_notes[pr]+'\n'
  request = urllib2.Request("https://api.github.com/repos/cms-sw/cmssw/releases?per_page=100",
                            headers={"Authorization" : "token " + token})
  releases = json.loads(urllib2.urlopen(request).read())
  matchingRelease = [x["id"] for x in releases if x["name"] == curr_release]
  if len(matchingRelease) < 1:
    print "Release %s not found." % curr_release
    exit(1)
  releaseId = matchingRelease[0]
  url = "https://api.github.com/repos/cms-sw/cmssw/releases/%s" % releaseId
  request = urllib2.Request(url, headers={"Authorization" : "token " + token})
  request.get_method = lambda: 'PATCH'
  print "Modifying release notes for %s at %s" % (curr_release, url)
  if opts.dryRun:
    print cmssw_notes_str
    print "\n cmsdist: \n"
    print cmsdist_notes_str
    print "--dry-run specified, quitting without modifying release."
    print 'ALL_OK'
    exit(0)

  header = "#### Changes since %s:\n%s\n" %  \
           ( prev_release , get_comparison_url( prev_release, curr_release , 'cmssw' ) )

  cmsdist_header = "\n#### CMSDIST Changes between Tags %s and %s:\n%s\n" % \
                   ( prev_cmsdist_tag , curr_cmsdist_tag , get_comparison_url( prev_cmsdist_tag, curr_cmsdist_tag , 'cmsdist' ) )
  print urllib2.urlopen(request, json.dumps({"body": header + cmssw_notes_str + cmsdist_header + cmsdist_notes_str })).read()
  print 'ALL_OK'
