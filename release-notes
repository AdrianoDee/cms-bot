#!/usr/bin/env python
from optparse import OptionParser
from os.path import exists,expanduser
from commands import getstatusoutput
from github import Github
import json
import urllib2
from sys import exit
import re


def add_categories_notes(notes,token):
  
  new_notes = ""   
  for note in notes.splitlines():
    
    note = note.decode('ascii','ignore')
    pr_number = note.split(' ')[1].replace('#','')
    request = urllib2.Request("https://api.github.com/repos/cms-sw/cmssw/issues/%s/labels" % pr_number,
                                  headers={"Authorization" : "token " + token})

    labels = json.loads(urllib2.urlopen(request).read())
    categories = [ l['name'].split('-')[0] for l in labels if not re.match( 'tests|orp|pending-signatures|comparison|fully|new-package' , l['name'] ) ]

    if len(categories) == 0:
      print "no categories for:"
      print pr_number

    for cat in categories:
      note += " `%s` " % cat

    new_notes += note + "\n"

  return new_notes

def format(s, **kwds):
  print kwds
  return s % kwds

if __name__ == "__main__":
  parser = OptionParser(usage="%(progname) <previous-release> <this-release>")
  parser.add_option("-n", "--dry-run", help="Only print out release notes. Do not execute.", 
                    dest="dryRun", default=False, action="store_true")
  opts, args = parser.parse_args()

  if len(args) != 2:
    parser.error("Wrong number or arguments")
  previous = args[0]
  release = args[1]
  if not exists("cmssw.git"):
    error, out = getstatusoutput("git clone --bare --reference /afs/cern.ch/cms/git-cmssw-mirror/cmssw.git git@github.com:cms-sw/cmssw.git")
    if error:
      parser.error("Error while checking out the repository:\n" + out)

  error, out = getstatusoutput("GIT_DIR=cmssw.git git fetch --all --tags")
  if error:
    parser.error("Error while updating the repository:\n" + out)

  error, notes = getstatusoutput(format("GIT_DIR=cmssw.git"
                                      " git log  --first-parent --merges --pretty='%%s: %%b' %(previous)s..%(release)s | "
                                      "grep 'pull request' |"
                                      "sed -e's/Merge pull request /- /;s|/[^:]*||;s/from /from @/'",
                                      previous=previous,
                                      release=release))
  if error:
    print "Error while getting release notes."
    print notes
    exit(1)

  token = open(expanduser("~/.github-token")).read().strip()

  notes = add_categories_notes(notes,token)

  request = urllib2.Request("https://api.github.com/repos/cms-sw/cmssw/releases?per_page=100",
                            headers={"Authorization" : "token " + token})
  releases = json.loads(urllib2.urlopen(request).read())
  matchingRelease = [x["id"] for x in releases if x["name"] == release]
  if len(matchingRelease) < 1:
    print "Release %s not found." % release
    exit(1)
  releaseId = matchingRelease[0]
  url = "https://api.github.com/repos/cms-sw/cmssw/releases/%s" % releaseId
  request = urllib2.Request(url, headers={"Authorization" : "token " + token})
  request.get_method = lambda: 'PATCH'
  print "Modifying release notes for %s at %s" % (release, url)
  if opts.dryRun:
    print notes
    print "--dry-run specified, quitting without modifying release."
    exit(1)
  header = "#### Changes since %s:\n" % previous
  print urllib2.urlopen(request, json.dumps({"body": header + notes })).read()
