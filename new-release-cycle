#!/usr/bin/env python
from github import Github, GithubException
from os.path import expanduser, dirname, abspath, join
from optparse import OptionParser
from cms_static import GH_CMSSW_ORGANIZATION, GH_CMSSW_REPO, GH_CMSDIST_REPO
from sys import exit, argv
from commands import getstatusoutput 
from socket import setdefaulttimeout
from releases import CMSSW_DEVEL_BRANCH
setdefaulttimeout(120)

try:
  scriptPath = dirname(abspath(__file__))
except Exception, e :
  scriptPath = dirname(abspath(argv[0]))

###############################################################
def create_branch(repo, base_branch, new_branch, dryRun=False):
  print "Creating new branch '%s' based on '%s'" % (new_branch, base_branch)
  base_ref = repo.get_branch(base_branch)
  print "Base branch %s has sha %s" % (base_branch, base_ref.commit.sha)
  try:
    repo.get_branch(new_branch)
    print "Branch already exists: ",new_branch
    return
  except GithubException as e:
    if not "Branch not found" in e.data['message']: raise e
  if not dryRun:
    repo.create_git_ref ("refs/heads/"+new_branch, base_ref.commit.sha)
    print "Created new branch ",new_branch," based on ",base_ref.commit.sha
  else:
    print "DryRun: Creating new branch ",new_branch," based on ",base_ref.commit.sha
  return

def get_milestone(milestone_name):
  milestones = repo.get_milestones()
  for item in repo.get_milestones():
    if milestone_name in item.title: return item
  return None

def create_milestone(repo, milestone_name, dryRun=False):
  print "Creating new milestone '%s'" % milestone_name
  milestone = get_milestone (milestone_name)
  if milestone: return milestone
  if not dryRun:
    milestone = repo.create_milestone (milestone_name)
    print "Created milestone %s with number %s" % (milestone_name, str(milestone.number))
  else:
    print "DryRun: Creating new milestone %s" % milestone_name
  return milestone

def add_milestone_in_cmsbot(cycle, milestone, dryRun=False):
  from releases import RELEASE_BRANCH_MILESTONE
  if cycle in RELEASE_BRANCH_MILESTONE:
    print "Milestone already available in the releases.py"
    return
  print "Creating %s release information" % cycle
  if not dryRun:
    with open(join(scriptPath,"milestones.py"), "a") as relFile:
      relFile.write('\n######################################################################\n')
      relFile.write('# Automatically added by cms-bot for %s release cycle\n' % (cycle))
      relFile.write('######################################################################\n')
      relFile.write('RELEASE_BRANCH_MILESTONE["%s"]=%s\n' % (cycle, milestone.number))
      relFile.write('RELEASE_BRANCH_PRODUCTION.append("%s")\n' % (cycle))
    print "Wrote release milestone information for %s" % cycle
    err, out = getstatusoutput("sed -i -e 's|^ *CMSSW_DEVEL_BRANCH *=.*$|CMSSW_DEVEL_BRANCH=%s|' %s" % (cycle,join(scriptPath,"releases.py")))
    print "Updated Development release cycle %s in releases.py file" % cycle
  else:
    print "DryRun: RELEASE_BRANCH_MILESTONE[\"%s\"]=%s" % (cycle, milestone.number)
    print "DryRun: CMSSW_DEVEL_BRANCH=%s" % cycle
    print "DryRun: Writing release milestone information for %s" % cycle
  return

def update_milestone(repo, source, srcMileStone, desMileStone):
  pulls = repo.get_pulls(base=source, state="open", sort="created", direction="asc")
  for pr in pulls:
    if pr.milestone.number == desMilestone.number: continue
    print "Wroking on PR ",pr.number,"with milestone",pr.milestone.number
    if pr.milestone.number == srcMilestone.number:
      if not args.dryRun:
        issue = repo.get_issue(pr.number)
        issue.edit(milestone=desMilestone)
      print "  Updated milestone:",desMilestone.number
    else:
      print "  Invalid Source Milestone:",pr.milestone.number
  return

def process(cycle, dryRun):
  gh = Github(login_or_token=open(expanduser("~/.github-token")).read().strip())
  cmssw_repo   = gh.get_repo(GH_CMSSW_ORGANIZATION+"/"+GH_CMSSW_REPO)
  srcMileStone = get_milestone(CMSSW_DEVEL_BRANCH)

  if not srcMileStone:
    print "ERROR: Unable to get milestone for %s" % CMSSW_DEVEL_BRANCH
    exit(1)

  #Create cmssw branches
  create_branch (cmssw_repo, "master", cycle, dryRun)
  
  #Create milestone
  desMileStone = create_milestone(cmssw_repo, cycle, dryRun)

  #Update milestone for existing Open PRs
  update_milestone(cmssw_repo, "master", srcMileStone, desMileStone)

  #Add milestone on
  add_milestone_in_cmsbot (cycle, milestone, dryRun)

  err, out = getstatusoutput("cd %s; git diff origin" % scriptPath)
  print "GIT DIFF:\n",out
  print "\nIf the changes above looks good then please commit and push these to github"
  return True

###############################################################
if __name__ == "__main__":
  parser = OptionParser(usage="%prog <pull-request-id>")
  parser.add_option("-n", "--dry-run",   dest="dryRun", action="store_true", help="Do not modify Github", default=False)
  parser.add_option("-c", "--cycle",     dest="cycle",  help="Release cycle name e.g CMSSW_9_3_X", type=str, default='None')
  opts, args = parser.parse_args()

  if len(args) > 0: parser.error("Too many arguments")
  if not opts.cycle or not opts.cycle.endswith("_X"): parser.error("Invalid cycle '"+str(opts.cycle)+"' it must end with _X")
  process (opts.cycle, opts.dryRun)
