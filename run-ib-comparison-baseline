#!/bin/sh -ex
TEST_FLAVOR=$1
CMS_BOT_DIR=$(dirname $0)
case $CMS_BOT_DIR in /*) ;; *) CMS_BOT_DIR=$(pwd)/${CMS_BOT_DIR} ;; esac
function Jenkins_GetCPU ()
{
  ACTUAL_CPU=$(nproc)
  if [ "X$1" != "X" ] ; then
    let ACTUAL_CPU=$ACTUAL_CPU*$1 || true
  fi
  echo $ACTUAL_CPU
}
mkdir -p "$WORKSPACE/matrix-results"
pushd "$WORKSPACE/matrix-results"
  MATRIX_OPTS="-j $(Jenkins_GetCPU)"
  if [ "${TEST_FLAVOR}" = "gpu" ] ; then
    MATRIX_OPTS="${MATRIX_OPTS} -w gpu"
    MATRIX_EXTRAS="$(grep 'PR_TEST_MATRIX_EXTRAS_GPU=' $CMS_BOT_DIR/cmssw-pr-test-config | sed 's|.*=||')"
  else
    MATRIX_EXTRAS=$(grep 'PR_TEST_MATRIX_EXTRAS=' $CMS_BOT_DIR/cmssw-pr-test-config | sed 's|.*=||')
  fi
  runTheMatrix.py -n ${MATRIX_OPTS} | grep -v ' workflows ' | grep '^[1-9][0-9]*\(.[0-9][0-9]*\|\)\s' | sed 's| .*||' > all.wfs
  [ "${TEST_FLAVOR}" = "" ] && MATRIX_OPTS="${MATRIX_OPTS} -s"
  WFS=""
  for wf in $(echo ${MATRIX_EXTRAS} | tr ',' '\n') ;  do
    [ $(grep "^${wf}$" all.wfs | wc -l) -gt 0 ] || continue
    WFS="${wf},${WFS}"
  done
  if [ "$WFS" != "" ] ; then
    WFS=$(echo ${WFS} | sed 's|,$||')
    MATRIX_OPTS="${MATRIX_OPTS} -l $WFS"
  elif [ "${TEST_FLAVOR}" != "" ] ; then
    echo "ERROR: No workflow found to generate baseline."
    exit 1
  fi
  [ $(runTheMatrix.py --help | grep 'job-reports' | wc -l) -gt 0 ] && MATRIX_OPTS="${MATRIX_OPTS} --job-reports"
  if [ -f ${CMSSW_RELEASE_BASE}/src/Validation/Performance/python/TimeMemoryJobReport.py ]; then
      [ $(runTheMatrix.py --help | grep 'command' | wc -l) -gt 0 ] && MATRIX_OPTS="${MATRIX_OPTS} --command ' --customise Validation/Performance/TimeMemoryJobReport.customiseWithTimeMemoryJobReport'"
  fi
  eval CMS_PATH=/cvmfs/cms-ib.cern.ch runTheMatrix.py ${MATRIX_OPTS} 2>&1 | tee -a matrixTests.log
  MAPPING_FILE=wf_mapping.txt
  ROOT_FILES=`find . -name DQM*.root | sort`
  for f in $ROOT_FILES ; do
    WF_PATH=`echo $f | sed 's/^\.\///'`
    WF_NUMBER=`echo $WF_PATH | sed 's/_.*$//'`
    echo $WF_PATH >> $MAPPING_FILE
  done
  touch $MAPPING_FILE
  ERRORS_FILE=wf_errors.txt
  touch $ERRORS_FILE
  grep "ERROR executing.*" matrixTests.log | while read line ; do
    WF_STEP=`echo "$line" | sed 's/.* cd //g' | sed 's/_.*step/;/g' | sed 's/_.*$//g'`
    # don't add duplicate lines
    if ! grep $WF_STEP $ERRORS_FILE; then
      echo $WF_STEP >> $ERRORS_FILE
    fi
  done
popd

[ -f ${LOCALRT}/used-ibeos-sort ] && mv ${LOCALRT}/used-ibeos-sort $WORKSPACE/matrix-results/
source $CMS_BOT_DIR/jenkins-artifacts
send_jenkins_artifacts $WORKSPACE/matrix-results/ ib-baseline-tests/${RELEASE_FORMAT}/${ARCHITECTURE}/${REAL_ARCH}/matrix${TEST_FLAVOR}-results
echo "RELEASE_FORMAT=${RELEASE_FORMAT}" > $WORKSPACE/cvmfs-deploy-baseline
echo "ARCHITECTURE=${ARCHITECTURE}"    >> $WORKSPACE/cvmfs-deploy-baseline
echo "TEST_FLAVOR=${TEST_FLAVOR}"      >> $WORKSPACE/cvmfs-deploy-baseline
echo "REAL_ARCH=${REAL_ARCH}"             >> $WORKSPACE/cvmfs-deploy-baseline

REL_QUEUE=$(echo ${RELEASE_FORMAT} | sed 's|_X_.*|_X|')
DEV_QUEUE=$(cd ${CMS_BOT_DIR}; python -c 'from releases import CMSSW_DEVEL_BRANCH; print CMSSW_DEVEL_BRANCH')
if [ "X${REL_QUEUE}" = "X${DEV_QUEUE}" ] ; then
  echo "${REL_QUEUE}" > $WORKSPACE/BaselineDevRelease
  send_jenkins_artifacts $WORKSPACE/BaselineDevRelease ib-baseline-tests/BaselineDevRelease
fi
