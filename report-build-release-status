#!/usr/bin/env python

from optparse import OptionParser
from github import Github
from os.path import expanduser

#
# Posts a message in the github issue that triggered the build
# The structure of the message depends on the option used
#

# -------------------------------------------------------------------------------
# Global Variables
# --------------------------------------------------------------------------------
GH_CMSSW_ORGANIZATION = 'cms-sw'
GH_CMSSW_REPO = 'cmssw'
POST_BUILDING='BUILDING'
BUILD_OK='BUILD_OK'
BUILD_ERROR='BUILD_ERROR'
UPLOADING='UPLOADING'
UPLOAD_OK='UPLOAD_OK'
UPLOAD_ERROR='UPLOAD_ERROR'
BUILDING_MSG='The build has started for {architecture} in {machine}' 
BUILD_OK_MSG='The build has finished sucessfully for the architecture {architecture} and is ready to be uploaded. \n' \
             'To start the upload write the comment: "upload {architecture}".\n' \
             'You can see the log for the build here \n' \
             '{log_url}'
UPLOADING_MSG='The upload has started for {architecture}'
UPLOAD_OK_MSG='The upload has successfuly finished for {architecture} \n You can see the log here: \n {log_url}'
UPLOAD_ERROR_MSG='The was error uploading {architecture}. \n You can see the log here: \n {log_url}'
BUILD_ERROR_MSG='The was error for {architecture}. \n You can see the log here: \n {log_url}'
BUILD_QUEUED_LABEL = 'build-release-queued'
BUILD_STARTED = 'build-release-started'
BASE_BUILD_LOG_URL = 'https://cmssdt.cern.ch/SDT/jenkins-artifacts/auto-build-release/%s-%s/%d' 
BASE_UPLOAD_LOG_URL = 'https://cmssdt.cern.ch/SDT/jenkins-artifacts/auto-upload-release/%s-%s/%d'

# -------------------------------------------------------------------------------
# Start of execution
# --------------------------------------------------------------------------------

#
# posts a message to the issue in github
# if dry-run is selected it doesn't post the message and just prints it
#
def post_message( issue , msg ):
  if opts.dryRun:
    print 'Not posting message (dry-run):\n %s' % msg
  else:
    print 'Posting message:\n %s' % msg
    issue.create_comment( msg )


if __name__ == "__main__":
  parser = OptionParser( usage="%prog <jenkins-build-number> <hostname> <issue-id> <arch> <release-name> <message-type> [ options ] \n "
                               "message-type = BUILDING | BUILD_OK | BUILD_ERROR | UPLOADING | UPLOAD_OK | UPLOAD_ERROR" )
  parser.add_option( "-n" , "--dry-run" , dest="dryRun" , action="store_true", help="Do not post on Github", default=False )
  opts, args = parser.parse_args( )

  if len( args ) != 6:
    parser.error( "Not enough arguments" )

  jenkins_build_number = int( args[ 0 ] )
  hostname = args[ 1 ]
  issue_id = int( args[ 2 ] )
  arch = args[ 3 ]
  release_name = args[ 4 ]
  action = args[ 5 ]

  gh = Github( login_or_token=open( expanduser( "~/.github-token" ) ).read( ).strip( ) )
  issue = gh.get_organization( GH_CMSSW_ORGANIZATION ).get_repo( GH_CMSSW_REPO ).get_issue( issue_id )

  if action == POST_BUILDING:
    msg = BUILDING_MSG.format( architecture=arch , machine=hostname)
    post_message( issue , msg )
  elif action == BUILD_OK:
    results_url = BASE_BUILD_LOG_URL % (release_name,arch,jenkins_build_number)
    msg = BUILD_OK_MSG.format( architecture=arch, log_url=results_url )
    post_message( issue , msg )
  elif action == BUILD_ERROR:
    results_url = BASE_BUILD_LOG_URL % (release_name,arch,jenkins_build_number)
    msg = BUILD_ERROR_MSG.format( architecture=arch, log_url=results_url )
    post_message( issue , msg )
  elif action == UPLOADING:
    msg = UPLOADING_MSG.format( architecture=arch )
    post_message( issue , msg )
  elif action == UPLOAD_OK:
    results_url = BASE_UPLOAD_LOG_URL % (release_name,arch,jenkins_build_number)
    msg = UPLOAD_OK_MSG.format( architecture=arch , log_url=results_url )
    post_message( issue , msg )
  elif action == UPLOAD_ERROR:
    results_url = BASE_UPLOAD_LOG_URL % (release_name,arch,jenkins_build_number)
    msg = UPLOAD_ERROR_MSG.format( architecture=arch , log_url=results_url )
    post_message( issue , msg )
  else:
    parser.error( "Message type not recognized" )
