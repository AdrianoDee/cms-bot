#!/bin/sh -ex
aklog
cd $WORKSPACE
rm -rf cmssw
git clone --reference /afs/cern.ch/cms/git-cmssw-mirror/cmssw.git git@github.com:cms-sw/cmssw.git cmssw
cd cmssw

CONFIG_MAP_URL="https://raw.githubusercontent.com/cms-sw/cms-bot/HEAD/config.map"
RELEASE_FILTER=${RELEASE_FILTER-.*}
ARCHITECTURE_FILTER=${ARCHITECTURE_FILTER-.*}
RELEASE_QUEUES="`curl -k -s $CONFIG_MAP_URL | grep -v "DISABLED=" | grep -e \"SCRAM_ARCH=$ARCHITECTURE_FILTER;\" | grep -e \"RELEASE_QUEUE=$RELEASE_FILTER;\" | sed -e's/.*RELEASE_QUEUE=//;s/;.*//' | sort -u`"
for QUEUE in $RELEASE_QUEUES; do
  unset RELEASE_BRANCH
  eval `curl -s -k $CONFIG_MAP_URL | grep -v "DISABLED=" | grep "RELEASE_QUEUE=$QUEUE;"`
  RELEASE_BRANCH=${RELEASE_BRANCH-$RELEASE_QUEUE} 
  git checkout $RELEASE_BRANCH
  RELEASE_NAME=`date +${QUEUE}_${DATE}`
  DAY=`date +%Y-%m-%d`
  HOUR=`echo $RELEASE_NAME | sed -e's|.*-\([0-9][0-9]\)00|\1|'`
  # find old tag, if any
  OLD_HASH=`git show-ref $RELEASE_NAME | cut -f1 -d\ `  
  NEW_HASH=`git rev-list -n 1 --before="$DAY $HOUR:00" $RELEASE_BRANCH`
  # If there is no new hash, we have a problem.
  # If there is no old hash, we simply tag.
  # If there is an old hash, we use the old one.
  if [ "X$NEW_HASH" = X ]; then
    exit 1
  fi
  if [ "X$OLD_HASH" = X ]; then
    git tag $RELEASE_NAME $NEW_HASH
    git push origin --tags
  fi

  RELEASE_LIST="`git show --pretty='%d' HEAD | tr '[ ,()]' '[\n   ]'| { grep \"^$QUEUE\" || true; }`"

  for ARCH_CONFIG in `curl -s -k $CONFIG_MAP_URL | grep -v "DISABLED=" | grep "RELEASE_QUEUE=$QUEUE;" | grep "SCRAM_ARCH=$ARCHITECTURE_FILTER;"`; do
    eval $ARCH_CONFIG
    echo "RELEASE_NAME=$RELEASE_NAME" > $WORKSPACE/properties-$RELEASE_NAME-$SCRAM_ARCH.txt
    echo "DATE_FORMAT=$DATE" >> $WORKSPACE/properties-$RELEASE_NAME-$SCRAM_ARCH.txt
    echo "REPOSITORY=cms.${CMS_REPOSITORY}" >> $WORKSPACE/properties-$RELEASE_NAME-$SCRAM_ARCH.txt
    echo "RELEASE_QUEUE=${QUEUE}" >> $WORKSPACE/properties-$RELEASE_NAME-$SCRAM_ARCH.txt
    echo "ARCHITECTURE=${SCRAM_ARCH}" >> $WORKSPACE/properties-$RELEASE_NAME-$SCRAM_ARCH.txt
    if [ "X$ALWAYS_BUILD" = X ]; then
      echo "RELEASE_LIST=`echo ${RELEASE_LIST} | tr \\n \\ `" >> $WORKSPACE/properties-$RELEASE_NAME-$SCRAM_ARCH.txt
    else
      echo "RELEASE_LIST=" >> $WORKSPACE/properties-$RELEASE_NAME-$SCRAM_ARCH.txt
    fi
  done
done

ls $WORKSPACE

# Delete all files after having created them so that we do not build unless
# requested.
if [ "X$SCHEDULE_BUILDS" = Xfalse ]; then
  mkdir -p $WORKSPACE/not-scheduled
  touch $WORKSPACE/properties-x.txt
  mv $WORKSPACE/properties-*.txt $WORKSPACE/not-scheduled
fi
