#!/bin/sh -ex
cd $WORKSPACE

CONFIG_MAP_PATH="$WORKSPACE/cms-bot/config.map"
RELEASE_FILTER=${RELEASE_FILTER-.*}
ARCHITECTURE_FILTER=${ARCHITECTURE_FILTER-.*}
RELEASE_QUEUES="`cat $CONFIG_MAP_PATH | grep -v "DISABLED=" | grep -e \"SCRAM_ARCH=$ARCHITECTURE_FILTER;\" | grep -e \"RELEASE_QUEUE=$RELEASE_FILTER;\" | sed -e's/.*RELEASE_QUEUE=//;s/;.*//' | sort -u`"

if [ "X$RELEASE_QUEUES" = X ]; then
  echo No releases found to build.
  exit 1
fi

rm -rf cmssw
git clone --reference /afs/cern.ch/cms/git-cmssw-mirror/cmssw.git git@github.com:cms-sw/cmssw.git cmssw
cd cmssw

DAY=`echo $DATE | sed 's|-[0-2][0-9]00||'`
HOUR=`echo $DATE | sed -e's|.*-\([0-9][0-9]\)00|\1|'`
ORDER_INDEX=0
for QUEUE in $RELEASE_QUEUES; do
  unset RELEASE_BRANCH
  unset BUILD_HOUR
  eval `cat $CONFIG_MAP_PATH | grep -v "DISABLED=" | grep "RELEASE_QUEUE=$QUEUE;"`  
  if [ "X$BUILD_HOUR" != "X" -a "$BUILD_HOUR" != "$HOUR" ] ; then continue ; fi
  RELEASE_BRANCH=${RELEASE_BRANCH-$RELEASE_QUEUE}
  git checkout $RELEASE_BRANCH
  RELEASE_NAME="${QUEUE}_${DATE}"
  # find old tag, if any
  OLD_HASH=`git show-ref $RELEASE_NAME | cut -f1 -d\ `  
  NEW_HASH=`git rev-list -n 1 --before="$DAY $HOUR:00" --first-parent $RELEASE_BRANCH`
  # If there is no new hash, we have a problem.
  # If there is no old hash, we simply tag.
  # If there is an old hash, we use the old one.
  if [ "X$NEW_HASH" = X ]; then
    exit 1
  fi
  if [ "X$OLD_HASH" = X ]; then
    git tag $RELEASE_NAME $NEW_HASH
    git push origin --tags
  fi

  RELEASE_LIST="`git show --pretty='%d' HEAD | tr '[ ,()]' '[\n   ]'| { grep \"^${QUEUE}_20\" || true; }`"

  for ARCH_CONFIG in `cat $CONFIG_MAP_PATH | grep -v "DISABLED=" | grep "RELEASE_QUEUE=$QUEUE;" | grep "SCRAM_ARCH=$ARCHITECTURE_FILTER;"`; do
    DOCKER_IMG=
    eval $ARCH_CONFIG
    echo "RELEASE_NAME=$RELEASE_NAME" > $WORKSPACE/properties
    echo "DATE_FORMAT=$DATE" >> $WORKSPACE/properties
    echo "REPOSITORY=cms.${CMS_REPOSITORY}" >> $WORKSPACE/properties
    echo "RELEASE_QUEUE=${QUEUE}" >> $WORKSPACE/properties
    echo "ARCHITECTURE=${SCRAM_ARCH}" >> $WORKSPACE/properties
    echo "DOCKER_IMG=${DOCKER_IMG}"  >> $WORKSPACE/properties
    if [ "X$ALWAYS_BUILD" = X ]; then
      echo "RELEASE_LIST=`echo ${RELEASE_LIST} | tr \\n \\ `" >> $WORKSPACE/properties
    else
      echo "RELEASE_LIST=" >> $WORKSPACE/properties
    fi
    ORDER_INDEX=`expr $ORDER_INDEX + 1`
    BUILD_ORDER=`echo 000${ORDER_INDEX} | tail -c 4`
    mv $WORKSPACE/properties $WORKSPACE/properties-${BUILD_ORDER}-${RELEASE_NAME}-${SCRAM_ARCH}.txt
  done
done

ls $WORKSPACE

# Delete all files after having created them so that we do not build unless
# requested.
if [ "X$SCHEDULE_BUILDS" = Xfalse ]; then
  mkdir -p $WORKSPACE/not-scheduled
  touch $WORKSPACE/properties-x.txt
  mv $WORKSPACE/properties-*.txt $WORKSPACE/not-scheduled
fi
