#!/bin/sh -ex
CMS_BOT_DIR=$(dirname $0)
case $CMS_BOT_DIR in /*) ;; *) CMS_BOT_DIR=$(pwd)/${CMS_BOT_DIR} ;; esac
cd $WORKSPACE

CONFIG_MAP_PATH="$CMS_BOT_DIR/config.map"
RELEASE_FILTER=${RELEASE_FILTER-.*}
ARCHITECTURE_FILTER=${ARCHITECTURE_FILTER-.*}
BUILD_PATCH=${BUILD_PATCH_FOR_NO_CHANGES-false}

RELEASE_QUEUES=""
for q in `cat $CONFIG_MAP_PATH | grep -v "DISABLED=" | grep -e "SCRAM_ARCH=$ARCHITECTURE_FILTER;" | grep -e "RELEASE_QUEUE=$RELEASE_FILTER;" | sed -e's/.*RELEASE_QUEUE=//;s/;.*//'` ; do
  if [ "X`echo " $RELEASE_QUEUES " | grep " $q " | wc -l`" = "X1" ] ; then continue; fi
  RELEASE_QUEUES="$RELEASE_QUEUES $q"
done

if [ "X$RELEASE_QUEUES" = X ]; then
  echo No releases found to build.
  exit 1
fi
rm -rf cmssw
git clone --reference /cvmfs/cms.cern.ch/cmssw.git.daily git@github.com:cms-sw/cmssw.git cmssw
cd cmssw

DAY=`echo $DATE | sed 's|-[0-2][0-9]00||'`
HOUR=`echo $DATE | sed -e's|.*-\([0-9][0-9]\)00|\1|'`
ORDER_INDEX=0
for QUEUE in $RELEASE_QUEUES; do
  for IB_INFO in $(cat $CONFIG_MAP_PATH | grep -v "DISABLED=" | grep "RELEASE_QUEUE=$QUEUE;" | grep "SCRAM_ARCH=$ARCHITECTURE_FILTER;") ;  do
    unset RELEASE_BRANCH
    unset BUILD_HOUR
    unset DOCKER_IMG
    unset BUILD_PATCH_RELEASE
    unset NO_IB
    eval "$IB_INFO"
    if [ "X$NO_IB" = "X1" ] ; then continue ; fi
    if [ "X$FORCE_FULL_IB" = "Xfalse" -a "X$BUILD_HOUR" != "X" -a "$BUILD_HOUR" != "$HOUR" ] ; then continue ; fi
    if [ "X$BUILD_PATCH_RELEASE" != "X" -o "X$BUILD_PATCH" = "Xtrue" ] ; then
      BUILD_PATCH_RELEASE=true
    else
      BUILD_PATCH_RELEASE=false
    fi
    RELEASE_BRANCH=${RELEASE_BRANCH-$RELEASE_QUEUE}
    RELEASE_NAME="${QUEUE}_${DATE}"
    if [ "$CMSSW_TOOL_CONF_ONLY" != "true" ] ; then
      git checkout $RELEASE_BRANCH
      # find old tag, if any
      OLD_HASH=`git show-ref $RELEASE_NAME | cut -f1 -d\ `
      NEW_HASH=`git rev-list -n 1 --before="$DAY $HOUR:00" --first-parent $RELEASE_BRANCH`
      # If there is no new hash, we have a problem.
      # If there is no old hash, we simply tag.
      # If there is an old hash, we use the old one.
      if [ "X$NEW_HASH" = X ]; then
        exit 1
      fi
      if [ "X$OLD_HASH" = X ]; then
        git tag $RELEASE_NAME $NEW_HASH
        git push origin --tags
      fi
      RELEASE_LIST="`git show --pretty='%d' HEAD | tr '[ ,()]' '[\n   ]'| { grep \"^${QUEUE}_20\" || true; }`"
    else
      RELEASE_LIST="$RELEASE_NAME"
    fi

    echo "RELEASE_NAME=$RELEASE_NAME" > $WORKSPACE/properties
    echo "DATE_FORMAT=$DATE" >> $WORKSPACE/properties
    echo "REPOSITORY=cms.${CMS_REPOSITORY}" >> $WORKSPACE/properties
    echo "RELEASE_QUEUE=${QUEUE}" >> $WORKSPACE/properties
    echo "ARCHITECTURE=${SCRAM_ARCH}" >> $WORKSPACE/properties
    echo "DOCKER_IMG=${DOCKER_IMG}"  >> $WORKSPACE/properties
    echo "BUILD_PATCH_RELEASE=$BUILD_PATCH_RELEASE" >> $WORKSPACE/properties
    echo "FORCE_FULL_IB=$FORCE_FULL_IB" >> $WORKSPACE/properties
    echo "CMSSW_TOOL_CONF_ONLY=$CMSSW_TOOL_CONF_ONLY" >> $WORKSPACE/properties
    if [ "X$ALWAYS_BUILD" = X ]; then
      echo "RELEASE_LIST=`echo ${RELEASE_LIST} | tr \\n \\ `" >> $WORKSPACE/properties
    else
      echo "RELEASE_LIST=" >> $WORKSPACE/properties
    fi
    ORDER_INDEX=`expr $ORDER_INDEX + 1`
    BUILD_ORDER=`echo 000${ORDER_INDEX} | tail -c 4`
    mv $WORKSPACE/properties $WORKSPACE/properties-${BUILD_ORDER}-${RELEASE_NAME}-${SCRAM_ARCH}.txt
  done
done

ls $WORKSPACE

# Delete all files after having created them so that we do not build unless
# requested.
if [ "X$SCHEDULE_BUILDS" = Xfalse ]; then
  mkdir -p $WORKSPACE/not-scheduled
  touch $WORKSPACE/properties-x.txt
  mv $WORKSPACE/properties-*.txt $WORKSPACE/not-scheduled
fi
