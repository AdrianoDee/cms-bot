#!/bin/sh -ex

# The release should have been already created in Github
# CMSSW_X_Y_Z: the release to build
# ARCH: architecture for the build
# ISSUE_NUMBER: the number of the issue that triggered the build
# DRY_RUN_PARAM: parameter that to use dry-run

HERE=$WORKSPACE/build
BUILD_DIR=$HERE/$CMSSW_X_Y_Z-build
mkdir -p $BUILD_DIR
QUEUE=$CMSSW_QUEUE

git clone git@github.com:cms-sw/cmsdist.git $BUILD_DIR/CMSDIST
pushd $BUILD_DIR/CMSDIST
  eval $(cat config.map | grep "SCRAM_ARCH=$ARCH;" | grep "RELEASE_QUEUE=$QUEUE;")

  # a patch release uses the same cmsdist tag as its base release
  case $CMSSW_X_Y_Z in
    *patch*)
    BASE_RELEASE=`echo $CMSSW_X_Y_Z | sed 's/_patch[0-9]*//g'`
    CMSDIST_TAG=REL/$BASE_RELEASE/$ARCH
    PATCH='-patch'
  ;;
  esac

  git checkout $CMSDIST_TAG
popd

git clone -b $PKGTOOLS_TAG git@github.com:cms-sw/pkgtools.git $BUILD_DIR/PKGTOOLS

WORKER=`hostname | sed -e 's/\..*//'`
./report-build-release-status ${BUILD_NUMBER} $WORKER $ISSUE_NUMBER $ARCH $CMSSW_X_Y_Z BUILDING $DRY_RUN_PARAM

pushd $BUILD_DIR
  # prepare cmssw.spec
  sh -e PKGTOOLS/scripts/prepare-cmsdist $CMSSW_X_Y_Z $ARCH 2>&1 | tee -a $WORKSPACE/prepare-cmsdist.log
  PKGTOOLS/cmsBuild --architecture=$ARCH --builders 4 -j $(getconf _NPROCESSORS_ONLN) build cmssw$PATCH
popd

  
pushd $HERE/$CMSSW_X_Y_Z-build/CMSDIST
  git tag  REL/$CMSSW_X_Y_Z/$ARCH
  git push origin --tags
popd

RELEASES_MAP_URL="https://raw.githubusercontent.com/cms-sw/cms-bot/HEAD/releases.map"
PRODUCTION_ARCH=`curl -k -s $RELEASES_MAP_URL | grep "label=$QUEUE;" | grep prodarch=1 | sed -e's/.*architecture=//;s/;.*//'`
if [ "X$ARCH" == "X$PRODUCTION_ARCH" ]; then
  echo 'I built the production architecture, I need to trigger the release notes job in jenkins'

  case $CMSSW_X_Y_Z in
  *patch*)

      PATCH_NUMBER=`echo $CMSSW_X_Y_Z | sed 's/.*_patch//g'`
      BASE_RELEASE=`echo $CMSSW_X_Y_Z | sed 's/_patch[0-9][0-9]*//g'`
      if [ "$PATCH_NUMBER" == "1" ]; then
        PREVIOUS_CMSSW_X_Y_Z=$BASE_RELEASE
      else
        PREVIOUS_CMSSW_X_Y_Z=$BASE_RELEASE"_patch"$(( PATCH_NUMBER - 1 ))
      fi

    ;;
    *pre*)

      PATCH_NUMBER=`echo $CMSSW_X_Y_Z | sed 's/.*_pre//g'`
      BASE_RELEASE=`echo $CMSSW_X_Y_Z | sed 's/_pre[0-9][0-9]*//g'`
      if [ "$PATCH_NUMBER" == "1" ]; then
        PREVIOUS_CMSSW_X_Y_Z=$BASE_RELEASE
      else
        PREVIOUS_CMSSW_X_Y_Z=$BASE_RELEASE"_pre"$(( PATCH_NUMBER - 1 ))
      fi

    ;;
    *)

      case $CMSSW_X_Y_Z in
      *SLHC*)
        REL_NUM_EXP='CMSSW_[0-9][0-9]*_[0-9][0-9]*_[0-9][0-9]*_SLHC'
      ;;
      *)
        REL_NUM_EXP='CMSSW_[0-9][0-9]*_[0-9][0-9]*_'
      ;;
      esac

      RELEASE_NUMBER=`echo $CMSSW_X_Y_Z | sed "s/$REL_NUM_EXP//g"`
      BASE_NO_NUMBER=`echo $CMSSW_X_Y_Z | sed 's/[0-9]*$//g'`
      PREVIOUS_CMSSW_X_Y_Z=$BASE_NO_NUMBER$(( $RELEASE_NUMBER -1 ))
      ;;
  esac

 
  TRIGGER_RELEASE_NOTES_FILE=$WORKSPACE/release-notes.properties
  echo "PREVIOUS_RELEASE=$PREVIOUS_CMSSW_X_Y_Z" >> $TRIGGER_RELEASE_NOTES_FILE
  echo "RELEASE=$CMSSW_X_Y_Z" >> $TRIGGER_RELEASE_NOTES_FILE
  echo "PREVIOUS_CMSDIST_TAG=REL/"$PREVIOUS_CMSSW_X_Y_Z"/"$ARCH >> $TRIGGER_RELEASE_NOTES_FILE
  echo "CMSDIST_TAG=REL/"$CMSSW_X_Y_Z"/"$ARCH >> $TRIGGER_RELEASE_NOTES_FILE
fi

# If it reaches here it is because there were no errors
echo 'ALL_OK'

