#!/bin/sh -ex

# The release should have been already created in Github
# CMSSW_X_Y_Z: the release to build
# ARCH: architecture for the build

HERE=$WORKSPACE/build
BUILD_DIR=$HERE/$CMSSW_X_Y_Z-build
mkdir -p BUILD_DIR
QUEUE=`echo $CMSSW_X_Y_Z | sed -e 's/\(CMSSW_[0-9][0-9]*_[0-9][0-9]*\).*/\1_X/'`
git clone git@github.com:cms-sw/cmsdist.git $BUILD_DIR/CMSDIST
pushd $BUILD_DIR/CMSDIST
  eval $(cat config.map | grep "SCRAM_ARCH=$ARCH;" | grep "RELEASE_QUEUE=$QUEUE;")

  # a patch release uses the same cmsdist tag as its base release
  case $CMSSW_X_Y_Z in
    *patch*)
    BASE_RELEASE=`echo $CMSSW_X_Y_Z | sed 's/_patch[0-9]*//g'`
    CMSDIST_TAG=REL/$BASE_RELEASE/$ARCH
  ;;
  esac

  git checkout $CMSDIST_TAG
popd

git clone -b $PKGTOOLS_TAG git@github.com:cms-sw/pkgtools.git $BUILD_DIR/PKGTOOLS

pushd $BUILD_DIR
  # prepare cmssw.spec
  sh -e PKGTOOLS/scripts/prepare-cmsdist $CMSSW_X_Y_Z $ARCH 2>&1 | tee -a $WORKSPACE/prepare-cmsdist.log
  PKGTOOLS/cmsBuild --architecture=$ARCH --builders 4 -j 16 build cmssw 2>&1 | tee -a $WORKSPACE/build.log
popd

if grep "RPM build errors" $WORKSPACE/build.log; then
  echo "The build had errors"
else
  echo "The build ran ok"
fi
