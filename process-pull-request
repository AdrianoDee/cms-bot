#!/usr/bin/env python
from github import Github
from os.path import expanduser
from optparse import OptionParser
from process_pr import process_pr
from socket import setdefaulttimeout
from time import sleep, gmtime
from calendar import timegm
setdefaulttimeout(120)

if __name__ == "__main__":
  parser = OptionParser(usage="%prog <pull-request-id>")
  parser.add_option("-c", "--commit",     dest="commit",     action="store_true", help="Get last commit of the PR", default=False)
  parser.add_option("-n", "--dry-run",    dest="dryRun",     action="store_true", help="Do not modify Github", default=False)
  parser.add_option("-r", "--repository", dest="repository", help="Github Repositoy name e.g. cms-sw/cmssw.", type=str, default="cms-sw/cmssw")
  opts, args = parser.parse_args()

  if len(args) != 1:
    parser.error("Too many/few arguments")
  prId = int(args[0])
  
  gh = Github(login_or_token=open(expanduser("~/.github-token")).read().strip())
  doSleep = 0
  rate_limit = gh.rate_limiting[0]
  rate_reset_sec = gh.rate_limiting_resettime - timegm(gmtime())
  if   rate_limit<20:   doSleep = rate_reset_sec
  elif rate_limit<100:  doSleep = 120
  elif rate_limit<500:  doSleep = 60
  elif rate_limit<1000: doSleep = 30
  elif rate_limit<2000: doSleep = 15
  if (rate_reset_sec<doSleep) : doSleep=rate_reset_sec
  print 'GH API Limits: ', rate_limit , rate_reset_sec , doSleep
  if doSleep>0:
    print "Slowing down for %s sec due to api rate limits %s approching zero" % (doSleep, rate_limit)
    sleep (doSleep)

  repo = gh.get_repo(opts.repository)
  if opts.commit:
    pr   = repo.get_pull(prId)
    print pr.get_commits().reversed[0].commit.sha
  else:
    process_pr(gh, repo, repo.get_issue(prId), opts.dryRun)
