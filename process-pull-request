#!/usr/bin/env python
from github import Github
from os.path import expanduser
from optparse import OptionParser
from categories import CMSSW_CATEGORIES, CMSSW_L2, CMSSW_L1
from releases import RELEASE_BRANCH_MILESTONE, RELEASE_BRANCH_PRODUCTION, RELEASE_BRANCH_CLOSED
from releases import RELEASE_MANAGERS
from watchers import WATCHERS

import re
from sys import exit

# Prepare various comments regardless of whether they will be made or not.
def format(s, **kwds):
  return s % kwds

# Update the milestone for a given issue.
def updateMilestone(issue, pr):
  if issue.milestone:
    return
  branch = pr.base.label.split(":")[1]
  milestoneId = RELEASE_BRANCH_MILESTONE.get(branch, None)
  if not milestoneId:
    print "Unable to find a milestone for the given branch"
    return
  milestone = repo.get_milestone(milestoneId)
  print "Setting milestone to %s" % milestone.title
  if opts.dryRun:
    return
  issue.edit(milestone=milestone)

if __name__ == "__main__":
  parser = OptionParser(usage="%prog <pull-request-id>")
  parser.add_option("-n", "--dry-run", dest="dryRun", action="store_true", help="Do not modify Github", default=False)
  opts, args = parser.parse_args()

  if len(args) != 1:
    parser.error("Too many arguments")
  prId = int(args[0])
  gh = Github(login_or_token=open(expanduser("~/.github-token")).read().strip())
  try:
    pr = gh.get_organization("cms-sw").get_repo("cmssw").get_pull(prId)
  except:
    print "Could not find pull request. Maybe this is an issue"
    exit(0)

  # Process the changes for the given pull request so that we can determine the
  # signatures it requires.
  packages = set(["/".join(x.filename.split("/", 2)[0:2]) for x in pr.get_files()])
  print "Following packages affected:"
  print "\n".join(packages)
  signing_categories = set([category for package in packages 
                            for category, category_packages in CMSSW_CATEGORIES.items()
                            if package in category_packages])

  # We always require tests.
  signing_categories.add("tests")
  # We require ORP approval for releases which are in production.
  if pr.base.ref in RELEASE_BRANCH_PRODUCTION:
    print "This pull request requires ORP approval"
    signing_categories.add("orp")

  print "Following categories affected:"
  print "\n".join(signing_categories)


  # Given the packages check if there are additional developers watching one or more.
  author = pr.user.login
  watchers = set(["@" + user for package in packages
                       for user, watched_regexp in WATCHERS.items()
                       for regexp in watched_regexp
                       if re.match("^" + regexp + ".*", package) and user != author])
  print "Watchers " + ", ".join(watchers)

  repo = gh.get_organization("cms-sw").get_repo("cmssw")
  issue = repo.get_issue(prId)

  updateMilestone(issue, pr)
  # Process the issue comments
  signatures = dict([(x, "pending") for x in signing_categories])
  last_commit_date = pr.get_commits()[pr.commits - 1].commit.committer.date
  already_seen = False
  pull_request_updated = False
  # A pull request is by default closed if the branch is a closed one.
  mustClose = False
  if pr.base.ref in RELEASE_BRANCH_CLOSED:
    mustClose = True
  requiresL1 = False
  releaseManagers=RELEASE_MANAGERS.get(pr.base.ref, []) 
  for comment in issue.get_comments():
    comment_date = comment.created_at
    commenter = comment.user.login
    # Check special cmsbuild messages:
    # - Check we did not announce the pull request already
    # - Check we did not announce changes already
    if commenter == "cmsbuild":
      if re.match("A new Pull Request was created by", comment.body.encode("ascii", "ignore")):
        already_seen = True
      if re.match("Pull request [#][0-9]+ was updated[.].*", comment.body.encode("ascii", "ignore")):
        pull_request_updated = False

    # Ignore all other messages which are before last commit.
    if comment_date < last_commit_date:
      print "Ignoring comment done before the last commit."
      pull_request_updated = True
      continue

    # Check signatures using the old Topic Collector.
    if commenter == "cmsbuild":
      actor = re.match("The following categories have been signed by [^@]*[@]([^ :]*).*", comment.body.encode("ascii", "ignore"))
      if actor:
        print "cmsbuild commented about signature"
        if not actor.group(1) in CMSSW_L2:
          continue
        for sign in CMSSW_L2[actor.group(1)]:
          signatures[sign] = "approved" 

      actor = re.match("The following categories have been rejected by [^@]*[@]([^ :]*).*", comment.body.encode("ascii", "ignore"))
      if actor:
        print "cmsbuild commented about rejection"
        if not actor.group(1) in CMSSW_L2:
          print actor.group(1) + " is not a L2."
          continue
        for sign in CMSSW_L2[actor.group(1)]:
          signatures[sign] = "rejected"

    # The first line is an invariant.
    first_line = str(comment.body.encode("ascii", "ignore").split("\n")[0].strip("\n\t\r "))

    # Check actions made by L1.
    # L1 signatures are only relevant for closed releases where 
    # we have a orp signature requested.
    # Approving a pull request, sign it.
    # Rejecting a pull request, will also close it.
    # Use "reopen" to open a closed pull request.
    if commenter in CMSSW_L1:
      requiresL1 = True
      if not "orp" in signing_categories:
        requiresL1 = False 
      elif re.match("^([+]1|approve[d]?)$", first_line):
        signatures["orp"] = "approved"
        mustClose = False
      elif re.match("^([-]1|reject|rejected)$", first_line):
        signatures["orp"] = "rejected" 
        mustClose = True
      elif re.match("reopen", first_line):
        signatures["orp"] = "pending"
        mustClose = False

    if commenter in CMSSW_L2:
      if not [x for x in CMSSW_L2[commenter] if x in signing_categories]:
        continue
      if re.match("^([+]1|approve[d]?|sign|signed)$", first_line):
        for sign in CMSSW_L2[commenter]:
          signatures[sign] = "approved"
      elif re.match("^([-]1|reject|rejected)$", first_line):
        for sign in CMSSW_L2[commenter]:
          signatures[sign] = "rejected"
      elif re.match("^hold$", first_line):
        for sign in CMSSW_L2[commenter]:
          signatures[sign] = "pending"

    # Check for release managers and and sign the tests category based on their comment
    #+tested for approved
    #-tested for rejected
    if commenter in releaseManagers:
      if re.match("^[+](test|tested)$", first_line):
        signatures["tests"] = "approved"
      elif re.match("^[-](test|tested)$", first_line):
        signatures["tests"] = "rejected"

  print "The labels of the pull request should be:"
  labels = [x + "-pending" for x in signing_categories]
  for category, value in signatures.items():
    if not category in signing_categories:
      continue
    labels = [l for l in labels if not l.startswith(category)]
    if value == "approved":
      labels.append(category + "-approved")
    elif value == "rejected":
      labels.append(category + "-rejected")
    else:
      labels.append(category + "-pending")

  print "\n".join(labels)

  # Now updated the labels.
  
  missingApprovals = [x for x in labels
                      if not x.endswith("-approved") and not x.startswith("orp") and not x.startswith("tests")]
  if not missingApprovals:
    print "The pull request is complete."
  if missingApprovals:
    labels.append("pending-signatures")
  else:
    labels.append("fully-signed")

  # We update labels only if they are different.
  old_labels = [x.name for x in issue.labels]
  releaseManagersMsg=releaseManagers and ", ".join(["@" + x for x in releaseManagers]) + " can you please take care of it?" or ""
  
  messageFullySigned = format("This pull request is fully signed and it will be"
                              " integrated in one of the next IBs unless changes" 
                              " or unless it breaks tests. %(releaseManagersMsg)s",
                              releaseManagersMsg=releaseManagersMsg)

  if set(old_labels) == set(labels):
    print "Labels unchanged."
  elif not opts.dryRun:
    issue.delete_labels()
    issue.add_to_labels(*[repo.get_label(x) for x in labels])
    if "fully-signed" in labels and not "orp-approved" in labels and not "orp-pending" in labels:
      pr.create_issue_comment(messageFullySigned)
    elif "fully-signed" in labels and "orp-approved" in labels:
      pass
    elif "fully-signed" in labels and "orp-pending" in labels:
      pr.create_issue_comment(messageFullySigned)
  

  unsigned = [k for (k, v) in signatures.items() if v == "pending"]
  missing_notifications = ["@" + name for name, l2_categories in CMSSW_L2.items()
                                      for signature in signing_categories
                                      if signature in l2_categories and signature in unsigned]
  missing_notifications = set(missing_notifications)
  # We do not want to spam people for the old pull requests.
  messageNewPR = format("A new Pull Request was created by @%(user)s %(name)s for %(branch)s.\n\n"
                        "%(title)s\n\n"
                        "It involves the following packages:\n\n"
                        "%(packages)s\n\n"
                        "%(l2s)s can you please review it and eventually sign? Thanks.\n"
                        "%(watchers)s"
                        "You can sign-off by replying to this message having '+1' in the first line of your reply.\n"
                        "You can reject by replying  to this message having '-1' in the first line of your reply.\n"
                        "%(releaseManagers)s"
                        "%(orpRequired)s",
                        user=pr.user.login,
                        name=pr.user.name and "(%s)" % pr.user.name or "",
                        branch=pr.base.ref,
                        title=pr.title.encode("ascii", "ignore"),
                        l2s=", ".join(missing_notifications),
                        packages="\n".join(packages),
                        watchers=watchers and ", ".join(watchers) + " this is something you requested to watch as well.\n" or "",
                        releaseManagers=releaseManagers and ", ".join(["@" + x for x in releaseManagers]) + " you are the release manager for this." or "",
                        orpRequired=requiresL1 and "\nThis pull requests was done for a production branch and will require explicit ORP approval on friday or L1 override." or "")
  messageUpdatedPR = format("Pull request #%(pr)s was updated. %(signers)s can you please check and sign again.",
                            pr=pr.number,
                            signers=", ".join(missing_notifications))

  # Finally decide whether or not we should close the pull request:
  messageBranchClosed = "This branch is closed for updates. Closing this pull request.\nPlease bring this up in the ORP meeting if really needed.\n"
  commentMsg = ""
  if pr.base.ref in RELEASE_BRANCH_CLOSED:
    commentMsg = messageBranchClosed
  elif not missingApprovals:
    print "Pull request is already fully signed. Not sending message."
  elif not already_seen and pr.number > 582:
    commentMsg = messageNewPR
  elif pull_request_updated and pr.number > 589:
    commentMsg = messageUpdatedPR
  else:
    print "Already notified L2 about " + str(pr.number)
  if commentMsg:
    print "The following comment will be made:"
    print commentMsg.decode("ascii", "replace")
  if commentMsg and not opts.dryRun:
    pr.create_issue_comment(commentMsg)
  
  # Check if it needs to be automatically closed.
  if mustClose == True and issue.state == "open":
    print "This pull request must be closed."
    if not opts.dryRun:
      print issue.edit(state="closed")
