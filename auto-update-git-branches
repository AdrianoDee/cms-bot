#!/bin/sh -ex
# Updates a branch by doing the following:
# - switch to the target branch
# - Merge the source branch but keep anything on the development branch
#   in case of conflicts.
# - Update the target branch. 
function updateBranch()
{
  REPO=`echo $1 | tr '[a-z]' '[A-Z]'`
  SOURCE_BRANCH=$2
  TARGET_BRANCH=$3
  STRATEGY=$4
  if [ "X$STRATEGY" != "X" ]; then STRATEGY="-X $STRATEGY" ; fi
  git clean -fdx &&\
  git checkout -q --force $TARGET_BRANCH &&\
  git reset --hard origin/$TARGET_BRANCH  &&\
  git merge --no-ff $STRATEGY origin/$SOURCE_BRANCH || (git diff | mail -s "[$REPO] Merge Conflict: $SOURCE_BRANCH -> $TARGET_BRANCH" cms-sdt-logs@cern.ch && exit 1)  &&\
  if [ "X`git rev-parse origin/$TARGET_BRANCH`" != "X`git rev-parse $TARGET_BRANCH`" ]; then \
    git commit --amend -m "Merge $SOURCE_BRANCH into $TARGET_BRANCH." &&\
    git push origin $TARGET_BRANCH ;\
  fi
  echo "====> OK $SOURCE_BRANCH => $TARGET_BRANCH"
}

function getRepos()
{
  (export PYTHONPATH=$SCRIPT_PATH; echo -e "from forward_ports_map import GIT_REPO_FWPORTS as p\nprint ' '.join(p.keys())" | python)
}

function getBranches()
{
  if [ "X$2" = "X" ] ; then
    (export PYTHONPATH=$SCRIPT_PATH; echo -e "from forward_ports_map import GIT_REPO_FWPORTS as p\nif '$1' in p:\n  x=p['$1'].keys()\n  x.sort()\n  print ' '.join(x)" | python)
  else
    (export PYTHONPATH=$SCRIPT_PATH; echo -e "from forward_ports_map import GIT_REPO_FWPORTS as p\nif '$1' in p and '$2' in p['$1']:\n  print ' '.join(p['$1']['$2'])" | python)
  fi
}

REPO_NAME=$1
BRRANCH=$2
SCRIPT_PATH="`dirname \"$0\"`"
SCRIPT_PATH="`(cd \"$SCRIPT_PATH\" && pwd)`"
WORKSPACE="${WORKSPACE-$PWD}"
if [ "X$REPO_NAME" = "X" ] ; then REPO_NAME=`getRepos`; fi
for full_repo in $REPO_NAME ; do
  case $full_repo in 
    */*) ;;
    *)   full_repo="cms-sw/${full_repo}" ;;
  esac
  repo=`echo $full_repo |sed 's|.*/||'`
  echo "Working on ${full_repo} ..."
  cd "$WORKSPACE"
  if [ ! -d $repo ] ; then
    git clone git@github.com:${full_repo}
    cd $repo
    if [ X$HOME = X ]; then
      git config user.email 'cmsbuild@cern.ch'
      git config user.name  'CMS Build'
    fi
  else
    cd $repo
  fi
  git fetch -q --force origin
  if [ "X$BRRANCH" = "X" ] ; then
    BRRANCHES=`getBranches $repo`
  else
    BRRANCHES=$BRRANCH
  fi
  for src in $BRRANCHES; do
    echo "Forward porting branch $src"
    for des in `getBranches $repo $src`; do
      (updateBranch $repo $src $(echo $des | tr ':' ' ')) || true
    done
  done
done
