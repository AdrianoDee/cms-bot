#!/bin/sh -ex

REPO_NAME=$1
if [ "X$REPO_NAME" = "X" ] ; then
  echo "Usage: $0 <cmssw|cmsdist> [<src-branch>] [<comma-seperated-commit-hashes>] [<OVERRIDE_STRATEGY>] [push]"
  exit 1
fi
SRC_BRANCH=$2
COMMITS=$3
OVERRIDE_STRATEGY=$4
PUSH_UPDATES=$5
DES_BRANCH=$6

GIT_USER="cms-sw"
SCRIPT_PATH="`dirname \"$0\"`"
SCRIPT_PATH="`(cd \"$SCRIPT_PATH\" && pwd)`"
WORKSPACE="${WORKSPACE-$PWD}"
HAS_ERRORS=0

#Some helper functions
#Return auto forward port branches.
function getBranches()
{
  #If only repo is known then return space seperated list of all source branches which should be forward ported
  #If repo and source branch are known then return space seperated list of all target branches
  if [ "X$2" = "X" ] ; then
    (export PYTHONPATH=$SCRIPT_PATH; echo -e "from forward_ports_map import GIT_REPO_FWPORTS as p\nif '$1' in p:\n  x=p['$1'].keys()\n  x.sort()\n  print ' '.join(x)" | python)
  else
    (export PYTHONPATH=$SCRIPT_PATH; echo -e "from forward_ports_map import GIT_REPO_FWPORTS as p\nif '$1' in p and '$2' in p['$1']:\n  print ' '.join(p['$1']['$2'])" | python)
  fi
}

#make sure we have a full repo name i.e. git-user/git-repo
case $REPO_NAME in 
  */*) ;;
  *)   REPO_NAME="${GIT_USER}/${REPO_NAME}" ;;
esac
repo=`echo $REPO_NAME |sed 's|.*/||'`
echo "Working on ${REPO_NAME} ..."
cd "$WORKSPACE"
#Clone repo if not already done
if [ ! -d $repo ] ; then
  git clone git@github.com:${REPO_NAME} ${repo}
  cd $repo
  if [ X$HOME = X ]; then
    git config user.email 'cmsbuild@cern.ch'
    git config user.name  'CMS Build'
  fi
else
  cd $repo
fi
#Fetch updates from remote
git fetch -q --force origin
#If source branch was not provided via command-line then get it from GIT_REPO_FWPORTS and reset commits
if [ "X$SRC_BRANCH" = "X" ] ; then
  SRC_BRANCH=`getBranches $repo`
  COMMITS=""
fi
LOG_COMMANDS="$WORKSPACE/$repo.log"
for src in $SRC_BRANCH; do
  echo "Forward porting branch $src"
  if [ "X$DES_BRANCH" = "X" ] ; then DES_BRANCH=$(getBranches $repo $src) ; fi
  for des in $DES_BRANCH; do
    rm -f $LOG_COMMANDS
    echo ">git clone https://github.com/cms-sw/cms-bot.git cms-bot" > $LOG_COMMANDS
    echo ">./cms-bot/`basename $0` $REPO_NAME $src $COMMITS" >> $LOG_COMMANDS
    if [ "X$OVERRIDE_STRATEGY" != "X" ] ; then
      merge_strategy=$OVERRIDE_STRATEGY
    else
      merge_strategy=$(echo $des | grep : | sed 's|^[^:]*:||')
    fi
    des=$(echo $des | sed 's|:.*||')
    err=0
    $SCRIPT_PATH/merge-git-branch "$LOG_COMMANDS" "$COMMITS" "$src" "$des" "$merge_strategy" "$PUSH_UPDATES" || err=1
    if [ "X$err" = "X1" ] ; then 
      HAS_ERRORS=1
      if [ ! "X$PUSH_UPDATES" = "X" ] ; then
        cat $LOG_COMMANDS | mail -s "[$(echo $repo | tr '[a-z]' '[A-Z]')] Merge Conflict: $src -> $(echo $des | sed 's|:.*||')" cms-sdt-logs@cern.ch
      fi
      break
    fi
  done
done
exit $HAS_ERRORS
